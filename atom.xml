<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[The Knowledge Accelerator]]></title>
  <subtitle><![CDATA[Helping you to learn something new]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://theknowledgeaccelerator.com/"/>
  <updated>2016-04-18T18:27:46.000Z</updated>
  <id>https://theknowledgeaccelerator.com/</id>
  
  <author>
    <name><![CDATA[Matthew Sanders]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Jellybean components]]></title>
    <link href="https://theknowledgeaccelerator.com/2016/04/16/jellybean-components/"/>
    <id>https://theknowledgeaccelerator.com/2016/04/16/jellybean-components/</id>
    <published>2016-04-17T01:57:58.000Z</published>
    <updated>2016-04-18T18:27:46.000Z</updated>
    <content type="html"><![CDATA[<p><img src="jellybean.svg" alt=""></p> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="5517142800" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script><p>Getting started in electronics design is a spectacular voyage, but making the transition from theory to practice can be a daunting task. Components in the real world have non-ideal properties, resulting in a combinatorial explosion of subtle variations in manufacture, contributing to an unwieldy list of products to choose from. Given such an expansive assortment of components, how do you determine which is right for your applications?</p> <p>When practicing the art of electronics it would be desirable to reference a well understood collection of fail-safe components to keep on hand. These components need not be the best choice for any specific usage scenario, but should serve as capable defaults providing savings in both time and money on trial and error. Such components are often affectionately referred to as “jellybeans”.</p> <p>This post is dedicated to the humble jellybean in hopes to aid the intrepid engineer looking for guidance establishing a parts bin. I will attempt to highlight each component’s primary characteristics of concern which I denote with the acronym PCOC (I pronounce this <a href="https://en.wikipedia.org/wiki/Peafowl" target="_blank" rel="external">peacock</a> as in the bird) as there are simply not enough acronyms in engineering already. I will also link to relevant datasheets where applicable.</p> <p>Summary information is provided to highlight important usage considerations of each type of component, although this is not intended as a comprehensive tutorial. I plan on writing such tutorials in future articles.</p> <p>It is important to note that much of this document is centered on <a href="https://en.wikipedia.org/wiki/Through-hole_technology" target="_blank" rel="external">through hole technology</a> as this has traditionally been the prefered technology for prototyping. Advances in <a href="https://en.wikipedia.org/wiki/Surface-mount_technology" target="_blank" rel="external">surface mount technology</a>, along with a dwindling supply of through hole parts for newer products, has began a chain reaction which will undoubtably lead to expansion of SMT usage in hobby circles. </p> <p>Many of the products discussed below have SMT varients, however, you may likely find more modern and vastly superior products using parametric search functions of popular online vendors. The PCOC information is still valid and serves as a good reference when searching for project specific parts.</p> <p>There are now several vendors that provide breakout boards for SMT to breadboard compatible pinouts which can come in handy for one off prototypes. <a href="https://en.wikipedia.org/wiki/SPICE" target="_blank" rel="external">SPICE simulators</a> and low volume manufacturing have given rise to another more abstract approach to prototyping.</p> <p>Integrated Circuits are also becoming more prolific replacing the function of descrete components with prebuilt solutions.</p> <p>I will try to update this information periodically, but if you have questions, comments, complaints or suggestions feel free to drop me a line <a href="mailto:matt@theknowledgeaccelerator.com?subject=jellybean">matt@theknowledgeaccelerator.com</a>.</p> <hr> <h1 id="Resistors" class="article-heading">Resistors<a class="article-anchor" href="#Resistors" aria-hidden="true"></a></h1> <h2 id="Resistors_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#Resistors_PCOC" aria-hidden="true"></a></h2> <ul> <li>Resistance in Ohms (Ω)</li> <li>Power Dissipation in Watts (W).</li> </ul> <h2 id="Resistors_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#Resistors_Usage_Summary" aria-hidden="true"></a></h2> <p>You should always leave adequate headroom on power dissipation, a good rule of thumb being twice the power required.</p> <p>Resistors are so fundamental, cheap, and small that it is not uncommon to keep a wide range of values on hand. The values given <a href="#Fixed_Value">below</a> are often sufficient and alternate values can be obtained from placing resitors in <a href="https://learn.sparkfun.com/tutorials/series-and-parallel-circuits" target="_blank" rel="external">series or parallel</a>.</p> <p>If more granular values are desired and tolerance is a concern a much wider selection can be obtained from the many <a href="https://en.wikipedia.org/wiki/Preferred_number#E_series" target="_blank" rel="external">IEC 60063 standard E-Series</a> values. To manage cost and inventory it is <a href="http://www.radio-electronics.com/info/data/resistor/e-series-e3-e6-e12-e24-e48-e96.php" target="_blank" rel="external">recommended</a> to choose the lowest E-Series required (Ex: E12 vs E48).</p> <p>You can purchase starter kits with E12 1% tolerance metal film resistors fairly cheap online which is more then enough variety to get started.</p> <h2 id="Resistors_Jellybeans" class="article-heading">Jellybeans<a class="article-anchor" href="#Resistors_Jellybeans" aria-hidden="true"></a></h2> <h3 id="Fixed_Value" class="article-heading">Fixed Value<a class="article-anchor" href="#Fixed_Value" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Type</strong>: carbon, metal, or metal-oxide film axial lead<br><strong>Resistance</strong>: 1k Ω, 10k Ω<br><strong>Power</strong>: 1/4 W, 1/2 W<br><strong>SMT/Power</strong>: 2012 Metric (0805 Imperial) 1/32 W, 3216 Metric (1206 Imperial) 1/16 W<br><strong>Example DataSheets</strong>: <a href="Carbon_Film_Resistors.pdf">Carbon Film</a>, <a href="Metal_Film_Resistors.pdf">Metal Film</a><br><strong>Other Info</strong>: <a href="Fixed_Resistor_Standards.pdf">Panasonic Standards Information</a>, <a href="https://learn.sparkfun.com/tutorials/resistors" target="_blank" rel="external">sparkfun tutorial</a>, <a href="https://en.wikipedia.org/wiki/Resistor" target="_blank" rel="external">Wikipedia</a><br></div> <h3 id="Variable" class="article-heading">Variable<a class="article-anchor" href="#Variable" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Type</strong>: Single Turn Rotary Linear Potentiometer (Logarithmic for audio applications)<br><strong>Resistance</strong>: 10k Ω, 100k Ω<br><strong>Power</strong>: 1/2 W<br><strong>Other Info</strong>: Commonly used to allow end user adjustments (ex: Volume control)<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Type</strong>: Trimmer Pot<br><a href="RM065.pdf">RM065</a> 6mm single turn, 0.1 W<br><a href="3386.pdf">3386</a> 9mm square single turn, 0.5 W<br><a href="3296.pdf">3296</a> 9mm square multi turn, 0.5 W<br><strong>Other Info</strong>: Commonly used for “set it and forget it” adjustments<br></div> <p><br></p> <hr> <h1 id="Capacitors" class="article-heading">Capacitors<a class="article-anchor" href="#Capacitors" aria-hidden="true"></a></h1> <h2 id="Capacitors_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#Capacitors_PCOC" aria-hidden="true"></a></h2> <ul> <li>Capacitance in Farads (F)</li> <li>Maximum Voltage in Volts (V)</li> </ul> <h2 id="Capacitors_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#Capacitors_Usage_Summary" aria-hidden="true"></a></h2> <p>Capacitors, much like resistors, are low enough cost and are utilized by most any project that people tend to keep a variety of values on hand. </p> <p>It is important to de-rate your caps adequately according to thier voltage rating or <a href="https://www.sparkfun.com/news/1271" target="_blank" rel="external">bad things can happen</a>. De-rating too much can also be undesirable in the form of <a href="http://electronics.stackexchange.com/questions/90542/how-does-ripple-degrade-electrolytic-capacitors" target="_blank" rel="external">excess ripple</a> ultimately lowering the life of the cap. There are some that suggest 2 to 3 times the rated voltage for simplicity but often 20% to 50% the voltage specification will do (unless high operating temperatures dictate further increase).</p> <p>Capacitors are physically one of the largest components used in many projects so actual package size is often a consideration along with leakage current, <a href="https://en.wikipedia.org/wiki/Equivalent_series_resistance" target="_blank" rel="external">ESR</a>, and tolerance.</p> <p>I have separated the jellybean caps by categorizing as polarized and non-polarized, however, polarity is not a factor often considered when selecting between them. Polarized capacitors simply have an added usage restriction where one end, marked as the negative electrode (cathode), must always be placed at the negative voltage with respect to the positive electrode (anode) or risk catastrophic failure. This restriction is often overlooked by the savings in cost and overall size per equivalent capacitance in the non-polarized variety.</p> <h2 id="Capacitors_Jellybeans" class="article-heading">Jellybeans<a class="article-anchor" href="#Capacitors_Jellybeans" aria-hidden="true"></a></h2> <h3 id="Polarized" class="article-heading">Polarized<a class="article-anchor" href="#Polarized" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Type</strong>: Aluminum Electrolytic<br><strong>Capacitance</strong>: 10uF, 100uF - 1000uF<br><strong>Max Volts</strong>: 10v - 630v application specific as noted <a href="#Capacitors_Usage_Summary">above</a><br><strong>Example DataSheets</strong>: <a href="Aluminum_Electrolytic_Caps_DataSheet.pdf">Aluminum Electrolytic Caps</a><br></div> <h3 id="Non_Polarized" class="article-heading">Non-Polarized<a class="article-anchor" href="#Non_Polarized" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Type</strong>: Ceramic<br><strong>Capacitance</strong>: 10 uF, 1 uF, 0.1 uF (decoupling), 100 nF, 10 nF, 1 nF, 22 pF (load caps for crystals)<br><strong>Max Volts</strong>: 16v - 630v application specific as noted <a href="#Capacitors_Usage_Summary">above</a><br><strong>Example DataSheets</strong>: <a href="Ceramic_Cap_DataSheet.pdf">Ceramic Caps</a><br></div> <p><br></p> <hr> <h1 id="Diodes" class="article-heading">Diodes<a class="article-anchor" href="#Diodes" aria-hidden="true"></a></h1> <h2 id="Diodes_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#Diodes_PCOC" aria-hidden="true"></a></h2> <p><strong>For Zeners</strong></p> <ul> <li>Power dissipation in Watts (W)</li> <li>Reverse breakdown voltage in Volts (V) “Zener breakdown”</li> </ul> <p><strong>For TVS</strong></p> <ul> <li>Stand-Off voltage in Volts (V)</li> <li>Peak pulse power dissipation in Watts (W)</li> <li>Peak pulse current in Amps (A)</li> <li>Clamping voltage in Volts (V)</li> </ul> <p><strong>For All others</strong></p> <ul> <li>Current rating in Amps (A)</li> <li>Maximum voltage in Volts (V)</li> <li>Forward voltage drop in Volts (V)</li> </ul> <h2 id="Diodes_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#Diodes_Usage_Summary" aria-hidden="true"></a></h2> <p>Silicon diodes are the most common with the 1N4000 series often used in AC adapters for common household appliances. When higher current is desired you can opt for the similarly popular 1N5400 series for up to 3A.</p> <p>For lower current switching applications the 1N4148 is very popular and can be used on signals up to 100 MHz.</p> <p>When a very low voltage drop or high switching speed is important the Schottky diode can come in handy.</p> <p>Zener diodes are intentionally wired in reverse to take advantage of thier stable and often well defined reverse breakdown voltage. Zeners are often used as voltage regulators or references.</p> <p>TVS diodes are similar to Zeners but instead of voltage regulation are used for voltage suppression. TVS have an extremely fast reaction time making them ideal components for protecting circuits from voltage spikes.</p> <p>Light emitting diode (LEDs) are used to produce light and have a higher forward voltage drop then the other common diodes. The forward voltage drop often depends on the color of light emitted.</p> <p>Photodiodes on the other hand are used to generate a current from a light source.</p> <h2 id="Diodes_Jellybeans" class="article-heading">Jellybeans<a class="article-anchor" href="#Diodes_Jellybeans" aria-hidden="true"></a></h2> <h3 id="Silicon" class="article-heading">Silicon<a class="article-anchor" href="#Silicon" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="1n400x.pdf">1N4001 - 1N4007</a><br><strong>Usage</strong>: Rectifier<br><strong>Current rating</strong>: 1A<br><strong>Max Voltage</strong>: 50V - 1000V<br><strong>Voltage Drop</strong>: 1.1V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="1n4148.pdf">1N4148</a><br><strong>Usage</strong>: Signal<br><strong>Current rating</strong>: 300mA (150mA average)<br><strong>Max Voltage</strong>: 100V<br><strong>Voltage Drop</strong>: 0.7V<br></div> <h3 id="Schottky" class="article-heading">Schottky<a class="article-anchor" href="#Schottky" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="1n5817.pdf">1N5817 - 1N5819</a><br><strong>Usage</strong>: Barrier Rectifier<br><strong>Current rating</strong>: 1A<br><strong>Max Voltage</strong>: 20 V, 30V, 40V<br><strong>Voltage Drop</strong>: 0.45V, 0.55V, 0.60V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="1n5820.pdf">1N5820 - 1N5822</a><br><strong>Usage</strong>: Barrier Rectifier<br><strong>Current rating</strong>: 3A<br><strong>Max Voltage</strong>: 20 V, 30V, 40V<br><strong>Voltage Drop</strong>: 0.475V, 0.500V, 0.525V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="mbr7xx.pdf">MBR735, MBR745</a><br><strong>Usage</strong>: Barrier Rectifier<br><strong>Current rating</strong>: 7.5A<br><strong>Max Voltage</strong>: 35 V, 45V<br><strong>Voltage Drop</strong>: 0.57V<br></div> <h3 id="Zener" class="article-heading">Zener<a class="article-anchor" href="#Zener" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="BZX79.pdf">BZX79 Series</a><br><strong>Usage</strong>: Voltage Regulator<br><strong>Power dissipation</strong>: 500mW<br><strong>Zener Voltage</strong>: 2.4V - 75V<br></div> <h3 id="TVS" class="article-heading">TVS<a class="article-anchor" href="#TVS" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="15ke.pdf">15ke Series</a><br><strong>Usage</strong>: Transient Voltage Suppressor (voltage spike protection)<br><strong>Stand-Off voltage</strong>: 5.8V - 459V<br><strong>Peak pulse power dissipation</strong>: 1500 W<br><strong>Peak pulse current</strong>: 143A - 2A<br><strong>Clamping voltage</strong>: 10.5V - 740V<br></div> <p><br></p> <hr> <h1 id="Transistors" class="article-heading">Transistors<a class="article-anchor" href="#Transistors" aria-hidden="true"></a></h1> <h2 id="Transistors_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#Transistors_PCOC" aria-hidden="true"></a></h2> <ul> <li>Polarity ( <strong>BJT:</strong> PNP or NPN <strong>FET:</strong> P-Channel or N-Channel )</li> <li>Voltage rating in Volts (V) ( <strong>BJT:</strong> Collector-Emitter <strong>FET:</strong> Drain-Source)</li> <li>Current rating in Amps (A) ( <strong>BJT:</strong> Collector <strong>FET:</strong> Drain)</li> <li>Power dissipation in Watts (W)</li> </ul> <p><strong>For BJTs</strong></p> <ul> <li>Base-Emitter saturation in Volts (V) (aka: base-emitter on voltage)</li> <li>Current Gain (Current multiplier no units) (aka: Beta, Hfe)</li> </ul> <p><strong>For MOSFETs</strong></p> <ul> <li>Drain-Source On Resistance (Ω)</li> <li>Gate-Source Threshold Voltage (V)</li> </ul> <h2 id="Transistors_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#Transistors_Usage_Summary" aria-hidden="true"></a></h2> <p>Transistors are the basic building blocks behind the majority of modern electronics. These increadible devices are conceptually simple yet surprisingly complex at the same time. </p> <p>Transistors in the most simplistic sense are used as a sort of electronic switch or amplifier. A signal is used to control a much larger signal much like a valve can be used to control the flow of water.</p> <p>The complexity can only begin to be appreciated by looking at the various parameters and characteristic curves in their datasheets. The primary characteristics mentioned <a href="#Transistors_PCOC">above</a> are often enough to consider up front until you find the need to further refine your designs.</p> <p>The list <a href="#Transistors_Jellybeans">below</a> is just a tiny sample of the enormous selection of transistors available. Many of them are fairly interchangeable depending on the application requirements so you are free to pick your poison as it were. </p> <p><a href="https://en.wikipedia.org/wiki/Bipolar_junction_transistor" target="_blank" rel="external">BJTs</a> and <a href="https://en.wikipedia.org/wiki/MOSFET" target="_blank" rel="external">MOSFETs</a> are by far the most common although some applications may benifit from other types such as <a href="https://en.wikipedia.org/wiki/JFET" target="_blank" rel="external">JFETs</a> or <a href="https://en.wikipedia.org/wiki/Insulated-gate_bipolar_transistor" target="_blank" rel="external">IGBTs</a>. Most hobby use, however, can safely ignore these other types.</p> <p><a href="https://en.wikipedia.org/wiki/Bipolar_junction_transistor" target="_blank" rel="external">BJTs</a> tend to be used for lower power applications (often due to cost savings) while <a href="https://en.wikipedia.org/wiki/MOSFET" target="_blank" rel="external">MOSFETs</a> are preferred for higher power applications. <a href="https://en.wikipedia.org/wiki/Bipolar_junction_transistor" target="_blank" rel="external">BJTs</a> are bipolar devices that are current driven while <a href="https://en.wikipedia.org/wiki/MOSFET" target="_blank" rel="external">MOSFETs</a> are unipolar devices and voltage driven. <a href="https://en.wikipedia.org/wiki/Bipolar_junction_transistor" target="_blank" rel="external">BJTs</a> were traditionally more common, but modern devices rely much more heavily on <a href="https://en.wikipedia.org/wiki/MOSFET" target="_blank" rel="external">MOSFETs</a>.</p> <p>As with any other component you must keep in mind maximum ratings and leave adequate headroom to ensure proper operation. The max power dissipation is often inclusive of active cooling such as using a heat sink in order to attain ambient temperature so it can be a good idea to calculate it for your application with the following formula where ThetaJA = Thermal Resistance, junction to ambient:</p> <p><code>Max Power = (Max Junction Temp - Ambient Temp) / ThetaJA</code></p> <p><a href="https://en.wikipedia.org/wiki/MOSFET" target="_blank" rel="external">MOSFETs</a> with a low threshold voltage (normally 0.5-2 volts) and low drain source resistance (often specified for Vgs=5V or 4.5V in the datasheet) are considered “logic level”. This allows them to be driven directly by the low voltage logic outputs of a microcontroller or GPIO pins on an Arduino, Raspberry Pi, or other development boards. You may still find a resistor being used at the gate due to gate capacitance and possibly a larger pull-down resistor ensuring the FET doesn’t “float”.</p> <p>It is a common mistake to drive a normal FET from logic levels, resulting in excess power loss as the FET will be operating in ohmic mode and thus acting like a resistor. If the application requires a normal FET then a driver circuit should be used.</p> <p>A final consideration worth mentioning is switching speed which is normally specified in MHz.</p> <h2 id="Transistors_Jellybeans" class="article-heading">Jellybeans<a class="article-anchor" href="#Transistors_Jellybeans" aria-hidden="true"></a></h2> <h3 id="BJT" class="article-heading">BJT<a class="article-anchor" href="#BJT" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="BC546-D.pdf">BC546</a><br><strong>Polarity</strong>: NPN<br><strong>Voltage rating</strong>: 30V<br><strong>Current rating</strong>: 100mA<br><strong>Power dissipation</strong>: 625mW<br><strong>Base-Emitter on</strong>: 0.7V<br><strong>Gain</strong>: 110-800<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="BC560.pdf">BC560</a><br><strong>Polarity</strong>: PNP<br><strong>Voltage rating</strong>: 30V<br><strong>Current rating</strong>: 100mA<br><strong>Power dissipation</strong>: 500mW<br><strong>Base-Emitter on</strong>: 0.7V<br><strong>Gain</strong>: 110-800<br></div><br><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="2N3904.pdf">2N3904</a><br><strong>Polarity</strong>: NPN<br><strong>Voltage rating</strong>: 40V<br><strong>Current rating</strong>: 200mA<br><strong>Power dissipation</strong>: 625mW<br><strong>Base-Emitter on</strong>: 0.65V - 0.95V<br><strong>Gain</strong>: 60-300<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="2N3906-D.pdf">2N3906</a><br><strong>Polarity</strong>: PNP<br><strong>Voltage rating</strong>: 40V<br><strong>Current rating</strong>: 200mA<br><strong>Power dissipation</strong>: 625mW<br><strong>Base-Emitter on</strong>: 0.65V - 0.95V<br><strong>Gain</strong>: 60-300<br></div><br><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="PN2222.pdf">PN2222(2N2222)</a><br><strong>Polarity</strong>: NPN<br><strong>Voltage rating</strong>: 30V<br><strong>Current rating</strong>: 600mA<br><strong>Power dissipation</strong>: 625mW<br><strong>Base-Emitter on</strong>: 2V<br><strong>Gain</strong>: 35-300<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="PN2907.pdf">PN2907(2N2907)</a><br><strong>Polarity</strong>: PNP<br><strong>Voltage rating</strong>: 40V<br><strong>Current rating</strong>: 800mA<br><strong>Power dissipation</strong>: 625mW<br><strong>Base-Emitter on</strong>: 1.3V-2.6V<br><strong>Gain</strong>: 35-300<br></div><br><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="2N4401.pdf">2N4401</a><br><strong>Polarity</strong>: NPN<br><strong>Voltage rating</strong>: 40V<br><strong>Current rating</strong>: 600mA<br><strong>Power dissipation</strong>: 625mW<br><strong>Base-Emitter on</strong>: 0.75V - 1.2V<br><strong>Gain</strong>: 20-300<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="2N4403.pdf">2N4403</a><br><strong>Polarity</strong>: PNP<br><strong>Voltage rating</strong>: 40V<br><strong>Current rating</strong>: 600mA<br><strong>Power dissipation</strong>: 625mW<br><strong>Base-Emitter on</strong>: 0.75V - 1.3V<br><strong>Gain</strong>: 20-300<br></div><br><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="TIP120.pdf">TIP120 - TIP122</a><br><strong>Polarity</strong>: NPN (Darlington)<br><strong>Voltage rating</strong>: 60V-100V<br><strong>Current rating</strong>: 5A<br><strong>Power dissipation</strong>: 2W<br><strong>Base-Emitter on</strong>: 2.5V<br><strong>Gain</strong>: 1000<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="TIP125.pdf">TIP125 - TIP127</a><br><strong>Polarity</strong>: PNP (Darlington)<br><strong>Voltage rating</strong>: 60V-100V<br><strong>Current rating</strong>: 5A<br><strong>Power dissipation</strong>: 2W<br><strong>Base-Emitter on</strong>: 2.5V<br><strong>Gain</strong>: 1000<br></div><br><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="D44H-D.pdf">D44H Series</a><br><strong>Polarity</strong>: NPN (Power)<br><strong>Voltage rating</strong>: 60V-80V<br><strong>Current rating</strong>: 10A<br><strong>Power dissipation</strong>: 70W<br><strong>Base-Emitter on</strong>: 1.5V<br><strong>Gain</strong>: 60<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="D44H-D.pdf">D45H Series</a><br><strong>Polarity</strong>: PNP (Power)<br><strong>Voltage rating</strong>: 60V-80V<br><strong>Current rating</strong>: 10A<br><strong>Power dissipation</strong>: 70W<br><strong>Base-Emitter on</strong>: 1.5V<br><strong>Gain</strong>: 60<br></div> <h3 id="MOSFET" class="article-heading">MOSFET<a class="article-anchor" href="#MOSFET" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="2N7000.pdf">2N7000 (BS170)</a><br><strong>Polarity</strong>: N-Channel<br><strong>Voltage rating</strong>: 60V<br><strong>Current rating</strong>: 200mA<br><strong>Power dissipation</strong>: 400mW<br><strong>Drain-Source on</strong>: 1.2Ω<br><strong>Gate-Source Threshold</strong>: 0.8V-3V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="BS250P.pdf">BS250P</a><br><strong>Polarity</strong>: P-Channel<br><strong>Voltage rating</strong>: 60V<br><strong>Current rating</strong>: 180mA<br><strong>Power dissipation</strong>: 830mW<br><strong>Drain-Source on</strong>: 14Ω<br><strong>Gate-Source Threshold</strong>: 1V-3.5V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="sihf510.pdf">IRF510</a><br><strong>Polarity</strong>: N-Channel (Power)<br><strong>Voltage rating</strong>: 100V<br><strong>Current rating</strong>: 5.6A<br><strong>Power dissipation</strong>: 43W<br><strong>Drain-Source on</strong>: 0.54Ω<br><strong>Gate-Source Threshold</strong>: 2V-4V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="91072.pdf">IRF9510</a><br><strong>Polarity</strong>: P-Channel (Power)<br><strong>Voltage rating</strong>: 100V<br><strong>Current rating</strong>: 4A<br><strong>Power dissipation</strong>: 43W<br><strong>Drain-Source on</strong>: 1.2Ω<br><strong>Gate-Source Threshold</strong>: 2V-4V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="irfs3806pbf.pdf">IRFB3806 (replaces IRFZ44N)</a><br><strong>Polarity</strong>: N-Channel (Power)<br><strong>Voltage rating</strong>: 60V<br><strong>Current rating</strong>: 43A<br><strong>Power dissipation</strong>: 71W<br><strong>Drain-Source on</strong>: 12.6mΩ<br><strong>Gate-Source Threshold</strong>: 2V-4V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="irlz44n.pdf">IRLZ44N</a><br><strong>Polarity</strong>: N-Channel (Power - logic level)<br><strong>Voltage rating</strong>: 55V<br><strong>Current rating</strong>: 47A<br><strong>Power dissipation</strong>: 110W<br><strong>Drain-Source on</strong>: 25mΩ<br><strong>Gate-Source Threshold</strong>: 1V-2V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="irl540npbf.pdf">IRL540</a><br><strong>Polarity</strong>: N-Channel (Power - logic level)<br><strong>Voltage rating</strong>: 100V<br><strong>Current rating</strong>: 36A<br><strong>Power dissipation</strong>: 140W<br><strong>Drain-Source on</strong>: 53mΩ<br><strong>Gate-Source Threshold</strong>: 1V-2V<br></div><br><div style="background-color:#F0F0F0;padding:15px 20px"><strong>Model</strong>:<a href="FQP30N06L.pdf">FQP30N06L</a><br><strong>Polarity</strong>: N-Channel (Power - logic level)<br><strong>Voltage rating</strong>: 60V<br><strong>Current rating</strong>: 32A<br><strong>Power dissipation</strong>: 79W<br><strong>Drain-Source on</strong>: 45mΩ<br><strong>Gate-Source Threshold</strong>: 1V-2.5V<br></div> <p><br></p> <hr> <h1 id="ICs" class="article-heading">Integrated Circuits (ICs)<a class="article-anchor" href="#ICs" aria-hidden="true"></a></h1> <h2 id="ICs_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#ICs_PCOC" aria-hidden="true"></a></h2> <ul> <li>Usage</li> </ul> <h2 id="ICs_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#ICs_Usage_Summary" aria-hidden="true"></a></h2> <p><a href="https://en.wikipedia.org/wiki/Integrated_circuit" target="_blank" rel="external">Integrated Circuits (ICs)</a> encapsulate some functional circuitry and expose an interface from which an external circuit can operate providing simplification, reuse, and space savings in the host circuit.</p> <h2 id="ICs_Jellybeans" class="article-heading">Jellybeans<a class="article-anchor" href="#ICs_Jellybeans" aria-hidden="true"></a></h2> <h3 id="Regulators" class="article-heading">Regulators<a class="article-anchor" href="#Regulators" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><a href="L200.pdf">L200</a><br><a href="LM317.pdf">LM317</a><br><a href="lm337.pdf">LM337</a><br><a href="lm340-n.pdf">78xx</a><br><a href="lm7905.pdf">79xx</a><br><a href="MC34063A-D.pdf">MC34063</a><br></div> <h3 id="Timers" class="article-heading">Timers<a class="article-anchor" href="#Timers" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><a href="ne555.pdf">NE555</a><br></div> <h3 id="Operational_Amplifiers" class="article-heading">Operational Amplifiers (Op-amps)<a class="article-anchor" href="#Operational_Amplifiers" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px">LM741<br>LM358/LM2904<br>TL071-TL074<br>LM324<br>CA3140<br>TS922<br></div> <h3 id="Comparators" class="article-heading">Comparators<a class="article-anchor" href="#Comparators" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><a href="lm193-n.pdf">LM393</a><br>LM339<br>LM319<br></div> <h3 id="USB_to_serial" class="article-heading">USB to serial<a class="article-anchor" href="#USB_to_serial" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px">CH340<br>CP2012<br>MCP2200<br></div> <h3 id="Voltage_Reference" class="article-heading">Voltage_Reference<a class="article-anchor" href="#Voltage_Reference" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><a href="lm431acz.pdf">LM431</a><br><a href="LM336Z25.pdf">LM336</a><br><strong>Other Info:</strong> Many newer voltage references come in surface mount packages. <a href="http://www.linear.com/" target="_blank" rel="external">Linear Technology</a> has a nice document on <a href="voltage_ref_info.pdf">how to choose a voltage reference</a><br></div> <h3 id="Logic" class="article-heading">Logic<a class="article-anchor" href="#Logic" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px"><a href="https://en.wikipedia.org/wiki/7400_series" target="_blank" rel="external">7400 Series</a><br></div> <h3 id="Amplifier" class="article-heading">Amplifier<a class="article-anchor" href="#Amplifier" aria-hidden="true"></a></h3> <div style="background-color:#F0F0F0;padding:15px 20px">LM386<br></div> <p><br></p> <hr> <h1 id="Inductors" class="article-heading">Inductors<a class="article-anchor" href="#Inductors" aria-hidden="true"></a></h1> <h2 id="Inductors_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#Inductors_PCOC" aria-hidden="true"></a></h2> <ul> <li>Inductance in Henrys (H)</li> </ul> <h2 id="Inductors_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#Inductors_Usage_Summary" aria-hidden="true"></a></h2> <p>Although one of the most basic components, along with resistors and capacitors, inductors are not often kept on hand by hobby electronics enthusiasts. Inductors are often constructed when needed from wire and possibly some form of magnetic core. Ferrite cores can be purchased or salvaged from old electronics.</p> <p>Inductive devices also include electric motors / generators and relays.</p> <p>Some Inductors are color coded and look very similar to resistors.</p> <p><br></p> <hr> <h1 id="Switches" class="article-heading">Switches<a class="article-anchor" href="#Switches" aria-hidden="true"></a></h1> <h2 id="Switches_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#Switches_PCOC" aria-hidden="true"></a></h2> <ul> <li>Actuation method</li> <li>Momentary or maintained</li> <li>Pole and throw count</li> <li>Current rating in Amps (A)</li> </ul> <h2 id="Switches_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#Switches_Usage_Summary" aria-hidden="true"></a></h2> <p>There is a vast selection of switches available today with actuation methods for any physical interaction you can think of. Push buttons are pretty much the most widely used along with rockers and slide actuated varieties. There are also more exotic switches that react to temperature, humidity, acceleration, pressure, magnetic fields, and much more. Transistors and Relays can even be considered electronic switches.</p> <p>Switches come in either momentary or maintained activation the former being activated only when actuated and the later remaining activated until actuated into another state.</p> <p>Pole and throw count are another defining characteristic of switches. Pole count dictates the number of separate circuits the switch can control, while throw count defines the number of positions each of the switch’s poles can be connected to. Many switches are referred to by a short hand abbreviation in the form XPYT where X and Y are the number of poles and throws respectively. When either count is below three an S or D is used instead to denote Single and Double. SPST, SPDT, DPST, 4PDT, etc.</p> <h2 id="Switches_Jellybeans" class="article-heading">Jellybeans<a class="article-anchor" href="#Switches_Jellybeans" aria-hidden="true"></a></h2> <div style="background-color:#F0F0F0;padding:15px 20px"><a href="b3f.pdf">b3f</a><br></div> <p><br></p> <hr> <h1 id="Crystals_Resonators_and_Oscillators" class="article-heading">Crystals, Resonators, and Oscillators<a class="article-anchor" href="#Crystals_Resonators_and_Oscillators" aria-hidden="true"></a></h1> <h2 id="Crystals_And_Oscillators_PCOC" class="article-heading">PCOC<a class="article-anchor" href="#Crystals_And_Oscillators_PCOC" aria-hidden="true"></a></h2> <ul> <li>Frequency in Hertz (Hz)</li> </ul> <h2 id="Crystals_And_Oscillators_Usage_Summary" class="article-heading">Usage Summary<a class="article-anchor" href="#Crystals_And_Oscillators_Usage_Summary" aria-hidden="true"></a></h2> <p>Oscillators are commonly used as clock sources for microcontrollers, radio frequency generators for remote controlled devices or other broadcasting, sound generation, and other signal generation applications. They can be built from many different combinations of components. Crystals, Resonators, and even simple building block circuits such as RCs provide various frequencies with tradeoffs between cost and accuracy. Crystals are far more accurate, but cost more then resonators.</p> <p>Crystals and Resonators require external circuitry to jump start and maintain the oscillation, however, Oscillators can be purchased as stand alone products with such circuitry built in at a higher cost.</p> <p>A general array of common frequencies and thier applications can be found <a href="https://en.wikipedia.org/wiki/Crystal_oscillator_frequencies" target="_blank" rel="external">here</a>. I have provided a summary of some of the more common frequencies (often produced with quartz crystals) in the <a href="#Crystals_And_Oscillators_Jellybeans">jellybean section below</a>.</p> <h2 id="Crystals_And_Oscillators_Jellybeans" class="article-heading">Jellybeans<a class="article-anchor" href="#Crystals_And_Oscillators_Jellybeans" aria-hidden="true"></a></h2> <div style="background-color:#F0F0F0;padding:15px 20px">32.768kHz<br><br>1MHz<br>4MHz<br>6MHz<br>8MHz<br>10MHz<br>12MHz<br>16MHz<br>20MHz<br>24MHz<br>25MHz<br></div> <p><br></p> <hr> <p>Further reading:</p> <ul> <li><a href="http://www.eevblog.com/forum/beginners/common-generic-cheap-easy-to-find-parts/" target="_blank" rel="external">EEVBlog Forum Topic</a></li> <li><a href="http://forum.allaboutcircuits.com/threads/components-selection-guide.65137/" target="_blank" rel="external">AAC component selection guide thread</a></li> <li><a href="https://learn.sparkfun.com/tutorials" target="_blank" rel="external">sparkfun Tutorials</a></li> </ul> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="5517142800" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>]]></content>
    <summary type="html">
    <![CDATA[Getting started in electronics design is a spectacular voyage, but making the transition from theory to practice can be a daunting task.]]>
    
    </summary>
    
      <category term="electronics" scheme="https://theknowledgeaccelerator.com/tags/electronics/"/>
    
      <category term="parts" scheme="https://theknowledgeaccelerator.com/tags/parts/"/>
    
      <category term="Hardware" scheme="https://theknowledgeaccelerator.com/categories/Hardware/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting started with Git]]></title>
    <link href="https://theknowledgeaccelerator.com/2015/11/16/getting-started-with-git/"/>
    <id>https://theknowledgeaccelerator.com/2015/11/16/getting-started-with-git/</id>
    <published>2015-11-17T04:58:29.000Z</published>
    <updated>2016-03-23T17:43:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="git-101.svg" alt=""></p> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="9132518405" data-ad-format="link"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script><p><a href="https://en.wikipedia.org/wiki/Version_control" target="_blank" rel="external">Source control</a> is a fundamental part of any software project. In fact, it can be used to facilitate versioned development of any works stored in digital media. </p> <p>In the following sections I will give a high level overview of source control options, explain in great detail how to use <a href="https://git-scm.com/" target="_blank" rel="external">git</a>, and provide information to help you build your workflow.</p> <p>By the end of this article you should be equipped with more then enough information to effectively version your projects with <a href="https://git-scm.com/" target="_blank" rel="external">git</a>.</p> <h1 id="Source_Control_Options" class="article-heading">Source Control Options<a class="article-anchor" href="#Source_Control_Options" aria-hidden="true"></a></h1> <p>If you already know about source control and what options are available you can skip to <a href="#Using_Git">Using Git</a> below.</p> <p>There are actually a number of solutions employed for storing versioned data. The simplest source control option is no source control at all. This is really a poor choice for obvious reasons:</p> <hr> <ul> <li>If files are deleted or corrupt data may be lost.</li> <li>No history of changes to fall back on if a problem is introduced later.</li> <li>Managing copies of data is complicated with manually tracking versions of files.</li> </ul> <hr> <p>For all of these reasons and more there exists software to keep track of file revisions, as of this writing the three most popular are:</p> <hr> <ul> <li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a> - Open source distributed source control.</li> <li><a href="https://subversion.apache.org/" target="_blank" rel="external">Subversion (aka SVN)</a> - Open source centralized source control.</li> <li><a href="https://www.perforce.com" target="_blank" rel="external">Perforce (sometimes reffered to as P4)</a> - Commercial centralized source control.</li> </ul> <hr> <p>There are others, but at this point they are mostly relics, not well known, or for niche markets. I will only go over the last two here as we will cover <a href="https://git-scm.com/" target="_blank" rel="external">git</a> in greater detail <a href="#Using_Git">below</a>.</p> <h2 id="Subversion" class="article-heading">Subversion<a class="article-anchor" href="#Subversion" aria-hidden="true"></a></h2> <p><a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> is a popular derivative of the legacy <a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System" target="_blank" rel="external">Concurrent Versions System (CVS)</a>, both of which I have used in previous projects. <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> was a welcome improvement and dominated the open source versioning system usage prior to the advent of <a href="https://git-scm.com/" target="_blank" rel="external">git</a>. </p> <p><a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> is mostly used via a <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">command-line interface (CLI)</a>, but there are several <a href="https://en.wikipedia.org/wiki/Comparison_of_Subversion_clients" target="_blank" rel="external">clients available</a>. My favorite client for Windows is the open source <a href="http://tortoisesvn.net/" target="_blank" rel="external">TortoiseSVN</a>, but I have used the freemium <a href="http://www.smartsvn.com/" target="_blank" rel="external">SmartSVN</a> on other platforms.</p> <p><a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> is a centralized source control system which we will discuss more in <a href="#Centralized_vs_distributed">Centralized vs distributed</a> below.</p> <p>I still find myself advocating the use of <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> for some situations in which <a href="https://git-scm.com/" target="_blank" rel="external">git</a> traditionally has trouble, including centralizing authority of binary assets and storing large files that require version control. It is worth noting that <a href="https://git-scm.com/" target="_blank" rel="external">git</a> has recently introduced <a href="#Large_File_Storage">Large File Storage</a> which may reduce or eliminate the need for <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> in these situations.</p> <p><a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> repositories are common enough that <a href="https://git-scm.com/" target="_blank" rel="external">git</a> provides a mechanism called <a href="https://git-scm.com/docs/git-svn" target="_blank" rel="external">git-svn</a> which allows you to use <a href="https://git-scm.com/" target="_blank" rel="external">git</a> as a client to connect to an <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> server. More information can be found on the free <a href="https://git-scm.com/book/en/v1/Git-and-Other-Systems-Git-and-Subversion" target="_blank" rel="external">git book</a>.</p> <h2 id="Perforce" class="article-heading">Perforce<a class="article-anchor" href="#Perforce" aria-hidden="true"></a></h2> <p><a href="https://www.perforce.com" target="_blank" rel="external">P4</a> is more of a corporate thing. It started off fairly expensive, as many commercial products tend to do, but since the wide-spread adoption of <a href="https://git-scm.com/" target="_blank" rel="external">git</a> the company behind it started to market to smaller teams with offers such as:</p> <blockquote><p>“All Perforce products are <strong>free</strong> for 20 users, forever… Including tech support. <strong>Really!</strong>“</p></blockquote> <p>A pretty compelling offer really, especially when you consider the power of the platform. I have used <a href="https://www.perforce.com" target="_blank" rel="external">P4</a> at several previous employers, and was very impressed with it overall. I have, however, never felt the need to use it on my own personal projects, especially when <a href="https://git-scm.com/" target="_blank" rel="external">git</a> is a free open source alternative. </p> <p>If you have the money it could be a wise investment, however, I personally would keep a watchful eye out for <a href="https://en.wikipedia.org/wiki/Vendor_lock-in" target="_blank" rel="external">Vendor lock-in</a>.</p> <h2 id="Centralized_vs_distributed" class="article-heading">Centralized vs distributed<a class="article-anchor" href="#Centralized_vs_distributed" aria-hidden="true"></a></h2> <p>So now we get to discuss the difference between centralized and distributed source control systems and look at the pros and cons of each. We will mostly be focusing on these concepts from a high level and will ignore any application specific workarounds.</p> <p>The primary difference between centralized and distributed versioning systems is the location of the repository. In centralized systems the repository is held on the server while the distributed approach duplicates the repository for each client. In fact with the distributed approach there isn’t really an authoritative server at all.</p> <p>There are logical trade-offs to either approach.</p> <hr> <ul> <li><p>Distributed clients typically require more storage then centralized systems that can compute files from diffs on the server.</p> </li> <li><p>Distributed systems lack a central authority to handle things like file permissions and locking. This can make it difficult to work with binary data as it normally doesn’t make much sense to merge changes to these files.</p> </li> <li><p>Distributed systems have a somewhat built in redundancy, unlike central systems which have a single point of failure. If the central server is down it often puts collaboration at a stand still, but since distributed systems do not require a central server you can just add another remote and collaborate directly with any peer.</p> </li> <li><p>Distributed systems offer much more flexibility when choosing a workflow. Many open source projects have a fairly distributed workflow allowing anyone to fork the project and work in isolation until some point in the future they create a pull request to merge into the main project. Most corporate environments instead create a more centralized workflow by designating a main repository that developers branch from directly.</p> </li> </ul> <hr> <p>Speaking of redundancy it is worth noting that neither approach by itself is bulletproof in this regard. Since data integrity is likely important to you, as it must be or you probably wouldn’t be using source control in the first place, you may also want to consider reducing the effects of <a href="https://en.wikipedia.org/wiki/Data_degradation" target="_blank" rel="external">data degradation</a>. </p> <p>Rather then being tempted to store repositories on commodity hardware you could be sure your data is safer with some sort of <a href="https://en.wikipedia.org/wiki/RAID" target="_blank" rel="external">RAID</a> setup for redundancy. I am unsure of the exact hardware setup for <a href="https://github.com" target="_blank" rel="external">GitHub</a> and <a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a>, but I haven’t heard many complaints yet, however, if you store your repositories on your own setup it may be worth investing in server grade hardware.</p> <p>I will probably write another post at some point on <a href="https://en.wikipedia.org/wiki/Network-attached_storage" target="_blank" rel="external">NAS</a> storage, but for now I will say that I have been pretty happy with <a href="http://www.freenas.org/" target="_blank" rel="external">FreeNAS</a> using the <a href="https://en.wikipedia.org/wiki/ZFS" target="_blank" rel="external">ZFS</a> file system. I do, however, plan on upgrading my <a href="https://en.wikipedia.org/wiki/Network-attached_storage" target="_blank" rel="external">NAS</a> setup in the future to include server grade hardware with support for <a href="https://en.wikipedia.org/wiki/ECC_memory" target="_blank" rel="external">ECC Memory</a>, as my current system does not. For those that are interested in this sort of thing, you can read more information on <a href="https://forums.freenas.org/index.php?threads/ecc-vs-non-ecc-ram-and-zfs.15449/" target="_blank" rel="external">ZFS with ECC RAM</a>.</p> <h1 id="Using_Git" class="article-heading">Using Git<a class="article-anchor" href="#Using_Git" aria-hidden="true"></a></h1> <p>We are now ready to talk about git and how to effectively use it to manage your projects. I will be covering all you need to know for getting up and running, but there is always more you can learn and much of it is freely available. The <a href="https://git-scm.com/doc" target="_blank" rel="external">git documentation site</a>, for example, has videos, reference materials, and a free ebook worth looking over.</p> <p>There are two main ways to use git each with their own trade-offs. You can choose to use one of the many <a href="https://git-scm.com/downloads/guis" target="_blank" rel="external">GUIs</a> available for a graphical approach, or you can go all out and use the <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">CLI</a>. I will be focusing mostly on the <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">CLI</a> as the <a href="https://git-scm.com/downloads/guis" target="_blank" rel="external">GUIs</a> are just wrappers around it. It is important to grasp the concepts here as it can help you fix situations where the <a href="https://git-scm.com/downloads/guis" target="_blank" rel="external">GUI</a> does something you didn’t expect. We will also explore a hybrid approach I use in <a href="#Workflows">Workflows</a> below.</p> <p>Before diving too far in, it is also worth visualizing <a href="https://git-scm.com/" target="_blank" rel="external">git</a> as a <a href="https://en.wikipedia.org/wiki/Directed_graph" target="_blank" rel="external">directed graph</a> where each node is a commit, the direction is from older to newer commits, and the HEAD is referencing a particular Node. Many of the <a href="https://git-scm.com/downloads/guis" target="_blank" rel="external">GUIs</a> provide a tree view with this representation as does logging with the <code>--graph</code> option. Most commands are responsible for navigating this graph by changing the commit the HEAD references or altering the graph by adding, removing, renaming, or otherwise modifying commits.</p> <h2 id="Accessing_the_command_line" class="article-heading">Accessing the command line<a class="article-anchor" href="#Accessing_the_command_line" aria-hidden="true"></a></h2> <p>Assuming you have <a href="https://git-scm.com/downloads" target="_blank" rel="external">downloaded git</a> accessing the <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">CLI</a> is actually pretty simple.</p> <p>If you are on Windows git comes with <code>git bash</code> which you run like any other Windows application. On Unix based systems like Mac or Linux you just need to open your terminal. If you don’t know where your terminal is you can simply type ‘terminal’ in the OS search or as always google how to open the terminal for your OS.</p> <h2 id="Getting_help" class="article-heading">Getting help<a class="article-anchor" href="#Getting_help" aria-hidden="true"></a></h2> <p>If you are uncomfortable with using a <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">CLI</a>, don’t be discouraged, <a href="https://git-scm.com/" target="_blank" rel="external">git’s</a> command line usage is extremely helpful and I actually find it to be somewhat of a gateway drug into the realm of <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">CLI</a> usage.</p> <p>You can for example list helpful information like this:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --help</span><br></pre></td></tr></table></figure> <p>This not only displays the usage information for <code>git</code>, but it also displays the most commonly used git commands, and even lists a few other commands for listing all available commands <code>git help -a</code> or even listing guides <code>git help -g</code>. You can then use <code>git help &lt;command&gt;</code> or <code>git help &lt;concept&gt;</code> for more specific information and usage.</p> <p>Ex:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git help clone</span><br></pre></td></tr></table></figure></p> <p>Displays the man page for the <code>clone</code> command. You can press <code>q</code> to exit from the man page screen.</p> <p>You will also notice along the way that git often displays other helpful information along with standard output from just about any command you use.</p> <h2 id="Generating_SSH_keys" class="article-heading">Generating SSH keys<a class="article-anchor" href="#Generating_SSH_keys" aria-hidden="true"></a></h2> <p>This is an optional first step, but if you plan on using <a href="https://github.com" target="_blank" rel="external">GitHub</a>, <a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a>, or any other similar setup I would highly recommend setting up ssh keys so you don’t have to type your password every time you try to hit the remote.</p> <p>I find the best instructions for setting this up for any site is this <a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">GitHub article</a>. The article has platform specific instructions defaulting to the platform your user agent is running on.</p> <p>I will summarize with the following commands:</p> <h3 id="1_a_Using_an_existing_SSH_key" class="article-heading">1.a. Using an existing SSH key<a class="article-anchor" href="#1_a_Using_an_existing_SSH_key" aria-hidden="true"></a></h3> <p>If you have an existing SSH key that you would like to use; you can list the contents of the users <code>.ssh</code> file and search for the public/private key pair.</p> <hr> <p>ex: </p> <ul> <li>id_rsa - private</li> <li>id_rsa.pub - public</li> </ul> <hr> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure> <h3 id="1_b_Generating_an_SSH_key" class="article-heading">1.b Generating an SSH key<a class="article-anchor" href="#1_b_Generating_an_SSH_key" aria-hidden="true"></a></h3> <p>If you didn’t have a key you wanted to use you can generate one:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;some comment&quot;</span><br></pre></td></tr></table></figure> <p>You can find out more usage information by looking at the man page <code>man ssh-keygen</code> or check <a href="http://linux.die.net/man/1/ssh-keygen" target="_blank" rel="external">online</a>.</p> <p>The basics from above: </p> <ul> <li>-t = type. In this case you can keep “rsa”</li> <li>-b = bits. In this case 4096 should be sufficient</li> <li>-C = an optional comment to help you organize your keys stored as plain text</li> </ul> <p>This will prompt you for a file to save the key, you can leave this as default and just press <code>enter</code>. You will then be asked to enter a passphrase and confirm it, you can leave this blank and just press <code>enter</code> both times. You can always change/add a passphrase later if you wish.</p> <p>If you do decide to use a passphrase you may want to check out <a href="https://help.github.com/articles/working-with-ssh-key-passphrases" target="_blank" rel="external">“working with ssh key passphrases”</a> and configure ssh-agent.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># if you choose to do so you can start ssh-agent</span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line"></span><br><span class="line"># then add your private key</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure> <p>You will then receive a result like:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db some comment</span><br></pre></td></tr></table></figure> <h3 id="2_Add_your_key_to_your_account" class="article-heading">2. Add your key to your account<a class="article-anchor" href="#2_Add_your_key_to_your_account" aria-hidden="true"></a></h3> <p>Now you will need to transfer the public key to the remote. If you are using a web service like <a href="https://github.com" target="_blank" rel="external">GitHub</a> or <a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a> you will want to copy the contents of your <code>.pub</code> to the clipboard either with a text editor or platform specific command:</p> <p>Mac<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p> <p>Linux<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># use your package manager to download xclip, in this case we use apt-get</span><br><span class="line">sudo apt-get install xclip</span><br><span class="line"></span><br><span class="line">xclip -sel clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p> <p>Windows<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p> <p>Once you have the contents of the <code>.pub</code> in the clipboard you can add a new SSH key entry for your account and paste it where appropriate.</p> <p>You are now ready to use the <code>git</code> protocol as opposed to <code>https</code> when accessing the remote repository. You will read more on this in the following section.</p> <h2 id="Initializing_a_repository" class="article-heading">Initializing a repository<a class="article-anchor" href="#Initializing_a_repository" aria-hidden="true"></a></h2> <p>There are two ways to get started using <a href="https://git-scm.com/" target="_blank" rel="external">git</a>; you will either want to <code>clone</code> an existing repository or <code>init</code> a brand new repository for a project you will be working on.</p> <h3 id="Cloning_an_existing_repository" class="article-heading">Cloning an existing repository<a class="article-anchor" href="#Cloning_an_existing_repository" aria-hidden="true"></a></h3> <p>If you want to start collaborating on an existing repository you will be using the <a href="https://git-scm.com/docs/git-clone" target="_blank" rel="external">clone</a> command.</p> <p>If the repository is hosted on <a href="https://github.com" target="_blank" rel="external">GitHub</a>, <a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a>, or a similar web service you can also choose to optionally <a href="https://help.github.com/articles/fork-a-repo/" target="_blank" rel="external">fork</a> the project prior to cloning. This simply creates a copy of the project on your account allowing you to push to this new remote. You can later submit a <a href="https://help.github.com/articles/using-pull-requests/" target="_blank" rel="external">pull request</a> to ask the original authors to merge in your changes.</p> <p>Since <a href="https://git-scm.com/" target="_blank" rel="external">git</a> is distributed, you can effectively “fork” a project manually by using <code>clone</code> on a server using <code>--bare</code>, or more commonly by creating a bare repository on a server, adding the server as a remote, and pushing your clone. We will talk more about repository creation in the <a href="#Creating_A_New_Repository">next section</a>.</p> <p>Using <code>clone</code> is pretty simple and only done once to download and initiate the project. You will find the <code>clone</code> url on the project’s main page.</p> <p>Here are some simple examples:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># example clone from bitbucket</span><br><span class="line">git clone git@bitbucket.org:myusername/myproject.git somefolder</span><br><span class="line"></span><br><span class="line"># example clone from github</span><br><span class="line">git clone git@github.com:myusername/myproject.git somefolder</span><br></pre></td></tr></table></figure> <p>The last parameter above <code>somefolder</code> is optional and allows you to specify the folder name to clone into, if you leave this off it will use the ‘humanized’ name by dropping the .git extension in this case <code>myproject</code>.</p> <p>Some useful options are:</p> <hr> <ul> <li><code>--no-checkout</code> (<code>-n</code>) : Do not checkout <code>HEAD</code> after cloning. (aka just download the <code>.git</code> folder)</li> <li><code>--bare</code> : Implies <code>-n</code>. Basically creates a headless repository without a working directory. (good to use as a remote)</li> <li><code>--mirror</code> : Implies <code>--bare</code>. Also maps refs (remote tracking info, notes, etc.)</li> <li><code>--depth &lt;depth&gt;</code> : creates a shallow clone with truncated history to the set number of revisions. (good for cloning large repositories)</li> <li><code>--recurse-submodules</code> (<code>--recursive</code>) : basically runs <code>git submodule update --init --recursive</code> after the clone to automatically init and update submodules.</li> </ul> <hr> <p>As usual you can get more information on this command with:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git help clone</span><br></pre></td></tr></table></figure> <h3 id="Creating_a_new_repository" class="article-heading">Creating a new repository<a class="article-anchor" href="#Creating_a_new_repository" aria-hidden="true"></a></h3> <p>Creating a new repository in <a href="https://git-scm.com/" target="_blank" rel="external">git</a> is simple with the <a href="https://git-scm.com/docs/git-init" target="_blank" rel="external">init</a> command.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure> <p>This will create a new <a href="https://git-scm.com/" target="_blank" rel="external">git</a> repository in the current directory. The most common argument for <code>init</code> is <code>--bare</code> to create a new bare repository that you intend to use as a remote. The common naming schema for a repository with no working tree (aka <code>--bare</code>) is to name it with the .git extension, otherwise you would omit the .git.</p> <p>The really interesting thing about the distributed nature of <a href="https://git-scm.com/" target="_blank" rel="external">git</a> is that you can create or move a repository anywhere you want. You can create a repository on a server, the local machine, or even removable media such as a USB drive… <a href="https://git-scm.com/" target="_blank" rel="external">git</a> doesn’t care!</p> <h2 id="Configuring_Git" class="article-heading">Configuring Git<a class="article-anchor" href="#Configuring_Git" aria-hidden="true"></a></h2> <p>You can configure a great deal of options with <a href="https://git-scm.com/docs/git-config" target="_blank" rel="external">config</a>. </p> <p>I am not going to go into much detail here as this is a very broad topic and not as commonly used as the other commands, so you can pretty much get by without worry. It also can make your environment a bit more unique which can make it more difficult to transition between your system and a co-worker who may need your help.</p> <p>It is nice to know, however, that <code>config</code> exists and what it can be used for. Besides setting colors, disabling advice hints, setting default user name, etc. You can also create aliases for commands to simplify usage and even extend <a href="https://git-scm.com/" target="_blank" rel="external">git</a> with your own commands.</p> <p>You can learn more <a href="https://git-scm.com/docs/git-config" target="_blank" rel="external">here</a> and <a href="https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks" target="_blank" rel="external">here</a>.</p> <p>There is one situation you will need to use <code>config</code>, that is telling <a href="https://git-scm.com/" target="_blank" rel="external">git</a> who you are. You can omit the <code>--global</code> option below if you just want to set it for the current repository. You may also be interested in setting up the default text editor you want git to launch.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line"></span><br><span class="line">git config --global core.editor emacs</span><br><span class="line"></span><br><span class="line"># if you are on Windows and wanted to use notepad++</span><br><span class="line">git config --global core.editor &quot;&apos;C:/Program Files/Notepad++/notepad++.exe&apos; -multiInst -nosession&quot;</span><br></pre></td></tr></table></figure> <p>You can read more on modifying the editor on this <a href="http://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits" target="_blank" rel="external">Stack Overflow Question</a>.</p> <h2 id="Ignoring_files_and_directories" class="article-heading">Ignoring files and directories<a class="article-anchor" href="#Ignoring_files_and_directories" aria-hidden="true"></a></h2> <p>The most common way to hide files and folders from <a href="https://git-scm.com/" target="_blank" rel="external">git</a> is to use <a href="https://git-scm.com/docs/gitignore" target="_blank" rel="external">.gitignore</a> files. You can read more about the other sources and precedence order by following the previous link, but in general most people tend to use the files in the tracked directory.</p> <p>This is an example of some common patterns you may find in a root level <code>.gitignore</code> file courtesy of <a href="https://gist.github.com/octocat/9257657" target="_blank" rel="external">octocat</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Compiled source #</span><br><span class="line">###################</span><br><span class="line">*.com</span><br><span class="line">*.class</span><br><span class="line">*.dll</span><br><span class="line">*.exe</span><br><span class="line">*.o</span><br><span class="line">*.so</span><br><span class="line"></span><br><span class="line"># Packages #</span><br><span class="line">############</span><br><span class="line"># it&apos;s better to unpack these files and commit the raw source</span><br><span class="line"># git has its own built in compression methods</span><br><span class="line">*.7z</span><br><span class="line">*.dmg</span><br><span class="line">*.gz</span><br><span class="line">*.iso</span><br><span class="line">*.jar</span><br><span class="line">*.rar</span><br><span class="line">*.tar</span><br><span class="line">*.zip</span><br><span class="line"></span><br><span class="line"># Logs and databases #</span><br><span class="line">######################</span><br><span class="line">*.log</span><br><span class="line">*.sql</span><br><span class="line">*.sqlite</span><br><span class="line"></span><br><span class="line"># OS generated files #</span><br><span class="line">######################</span><br><span class="line">.DS_Store</span><br><span class="line">.DS_Store?</span><br><span class="line">._*</span><br><span class="line">.Spotlight-V100</span><br><span class="line">.Trashes</span><br><span class="line">ehthumbs.db</span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure></p> <h2 id="Basic_operations" class="article-heading">Basic operations<a class="article-anchor" href="#Basic_operations" aria-hidden="true"></a></h2> <p>In this section we will go over some of the basic operations that are performed in <a href="https://git-scm.com/" target="_blank" rel="external">git</a>, but first we should go over the different states of a change.</p> <hr> <ul> <li><strong>ignored</strong> : changes made to ignored files are not tracked</li> <li><strong>untracked</strong> : files that are not yet tracked but not ignored</li> <li><strong>unstaged</strong> : changes that are not yet staged but part of tracked files</li> <li><strong>staged</strong> : changes that are added to the index (aka staging area)</li> <li><strong>committed</strong> : changes that have become part of a commit and are now tracked</li> <li><strong>stashed</strong> : changes that are put away into the temporary stash</li> </ul> <hr> <p>The basic usage of git is moving changes between these states. We already discussed ignoring files and we will discuss stashes in <a href="Branch_and_patching_operations">Branch and patching operations</a> below, the rest is standard operating procedure.</p> <h3 id="git_add" class="article-heading">git add<a class="article-anchor" href="#git_add" aria-hidden="true"></a></h3> <p>If you add a new file to your working directory, and it is not ignored, you have an untracked file. Unlike many source control systems <a href="https://git-scm.com/" target="_blank" rel="external">git</a> has an intermediate staging area that most changes go through before committing. In order to add to the stage you use the <a href="https://git-scm.com/docs/git-add" target="_blank" rel="external">add</a> command.</p> <hr> <p><strong>Note:</strong> below I use some git terminology like pathspec and tree-ish. You can find definitions in the <a href="http://git-scm.com/docs/gitglossary.html" target="_blank" rel="external">git glossary</a> and more information on this <a href="http://stackoverflow.com/questions/4044368/what-does-tree-ish-mean-in-git" target="_blank" rel="external">Stack Overflow Question</a>.</p> <hr> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># use -A option to add all changes to index</span><br><span class="line">git add -A</span><br><span class="line"></span><br><span class="line"># adding a single pathspec </span><br><span class="line">git add myfile.txt</span><br><span class="line"></span><br><span class="line"># adding multiple pathspecs</span><br><span class="line">git add myfile.txt myfile2.txt</span><br><span class="line"></span><br><span class="line"># adding fileglob</span><br><span class="line">git add *.txt</span><br><span class="line"></span><br><span class="line"># adding all changes in a directory (another pathspec)</span><br><span class="line">git add mydirectory</span><br></pre></td></tr></table></figure> <p>There are many more ways to use <code>add</code> but these are some of the more common. The nice thing about the stage in git is that it lets you be very selective about what you commit. You can have several changes on your local and selectively commit only a subset by adding those changes you want committed to the index.</p> <h3 id="git_reset" class="article-heading">git reset<a class="article-anchor" href="#git_reset" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-reset" target="_blank" rel="external">reset</a> command is used to “reset” a branch to a specific state. This can be used to undo changes made by <code>add</code> or to reset the state of your working tree to a completely different commit.</p> <hr> <p><strong>Note:</strong> The documentation will often refer to <code>HEAD</code>, this is most often the tip of the current branch unless you are in a “detached HEAD” state in which case it references a commit.</p> <hr> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># unstage a file from the index (reversing an add)</span><br><span class="line">git reset HEAD myfile.txt</span><br><span class="line"></span><br><span class="line"># Reset the previous commit keeping the changes</span><br><span class="line">git reset --soft HEAD~1</span><br><span class="line"></span><br><span class="line"># Reset the current branch to another (master in this case) discarding changes</span><br><span class="line">git reset --hard master</span><br></pre></td></tr></table></figure> <h3 id="git_commit" class="article-heading">git commit<a class="article-anchor" href="#git_commit" aria-hidden="true"></a></h3> <p>Once you are happy with the contents in the index you can craft a commit with the <a href="https://git-scm.com/docs/git-commit" target="_blank" rel="external">commit</a> command.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># commit and specify a message with -m if you leave this off git will prompt you for the commit message</span><br><span class="line">git commit -m &apos;some message&apos;</span><br><span class="line"></span><br><span class="line"># Note you can also bypass the stage by directly specifying pathspecs to commit</span><br><span class="line">git commit myfile.txt</span><br></pre></td></tr></table></figure> <hr> <p><strong>Note:</strong> If you omit the commit message git will open the configured editor to allow you to create the commit message. I touched on this in <a href="Configuring_Git">Configuring Git</a>.</p> <hr> <h3 id="basics_not_so_common" class="article-heading">not so common<a class="article-anchor" href="#basics_not_so_common" aria-hidden="true"></a></h3> <p>Here are some other basic operations that are not as commonly used, since removing and renaming files can be done in other ways.</p> <hr> <ul> <li><a href="https://git-scm.com/docs/git-rm" target="_blank" rel="external">rm</a> : Remove files from the working tree and index</li> <li><a href="https://git-scm.com/docs/git-mv" target="_blank" rel="external">mv</a> : Move or rename a file, directory, or symlink</li> </ul> <hr> <h2 id="Diagnostics" class="article-heading">Diagnostics<a class="article-anchor" href="#Diagnostics" aria-hidden="true"></a></h2> <p>It is always helpful to be able to gather information about the state of the repository or review the history of changes. The following commands help to aid in debugging and discovery.</p> <h3 id="git_status" class="article-heading">git status<a class="article-anchor" href="#git_status" aria-hidden="true"></a></h3> <p>One of the most frequently used commands is <a href="https://git-scm.com/docs/git-status" target="_blank" rel="external">status</a>. You will find yourself using <code>status</code> often to show the state of the working tree.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure> <h3 id="git_log" class="article-heading">git log<a class="article-anchor" href="#git_log" aria-hidden="true"></a></h3> <p>You can show commit logs with the <a href="https://git-scm.com/docs/git-log" target="_blank" rel="external">log</a> command. Just as any other command there are several options available, one combination I like to remember by an acronym “cdog” which is composed of <code>--color</code>, <code>--decorate</code>, <code>--oneline</code>, <code>--graph</code>.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line"># log last 5 commits</span><br><span class="line">git log -5</span><br><span class="line"></span><br><span class="line"># show last 4 commits in a colored graphical representation</span><br><span class="line">git log --color --decorate --oneline --graph -4</span><br></pre></td></tr></table></figure> <h3 id="git_diff" class="article-heading">git diff<a class="article-anchor" href="#git_diff" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-diff" target="_blank" rel="external">diff</a> command is used to show differences between various types of data.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># show file differences not yet staged</span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"># shows differences between index and HEAD. --cached is a synonym.</span><br><span class="line">git diff --staged</span><br><span class="line"></span><br><span class="line"># diff between two branches</span><br><span class="line">git diff branch1...branch2</span><br></pre></td></tr></table></figure> <h3 id="git_blame" class="article-heading">git blame<a class="article-anchor" href="#git_blame" aria-hidden="true"></a></h3> <p>If you are interested in seeing what author modified a line of a file and at what revision you can use the <a href="https://git-scm.com/docs/git-blame" target="_blank" rel="external">blame</a> command.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git blame myfile.txt</span><br></pre></td></tr></table></figure> <h3 id="diagnostics_not_as_common" class="article-heading">not as common<a class="article-anchor" href="#diagnostics_not_as_common" aria-hidden="true"></a></h3> <p>Here are some other diagnostic operations that you can use.</p> <hr> <ul> <li><a href="https://git-scm.com/docs/git-show" target="_blank" rel="external">show</a> : Show various types of objects.</li> <li><a href="https://git-scm.com/docs/git-shortlog" target="_blank" rel="external">shortlog</a> : Short variation of git log</li> <li><a href="https://git-scm.com/docs/git-describe" target="_blank" rel="external">describe</a> : Describe a commit using the most recent tag reachable from it.</li> <li><a href="https://git-scm.com/docs/git-bisect" target="_blank" rel="external">bisect</a> : Uses binary search to help find a commit that introduced a bug.</li> <li><a href="https://git-scm.com/docs/git-grep" target="_blank" rel="external">grep</a> : Print lines matching a pattern.</li> </ul> <hr> <h2 id="Branch_and_patching_operations" class="article-heading">Branch and patching operations<a class="article-anchor" href="#Branch_and_patching_operations" aria-hidden="true"></a></h2> <p>The real power and flexibility of <a href="https://git-scm.com/" target="_blank" rel="external">git</a> is in how easy and natural branch manipulation can be. Most workflows involve some form of branching and many developers create new branches for each feature, experiment, or even as a form of temporary storage. This allows you to work on multiple features at once in isolation.</p> <h3 id="git_branch" class="article-heading">git branch<a class="article-anchor" href="#git_branch" aria-hidden="true"></a></h3> <p>The basic branch management command is appropriately named <a href="https://git-scm.com/docs/git-branch" target="_blank" rel="external">branch</a>. The <code>branch</code> command allows you to list, create, rename, and delete branches. When working with remotes you may be interested in using the <code>--track</code> option.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># list local branches</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># list remote branches</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># list both remote and local branches</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"># create a new branch named mybranch</span><br><span class="line">git branch mybranch</span><br><span class="line"></span><br><span class="line"># delete branch named mybranch</span><br><span class="line">git branch -d mybranch</span><br><span class="line"></span><br><span class="line"># rename (if you omit the old name it implies the current branch)</span><br><span class="line">git branch -m myOldBranchName myNewBranchName</span><br></pre></td></tr></table></figure> <h3 id="git_checkout" class="article-heading">git checkout<a class="article-anchor" href="#git_checkout" aria-hidden="true"></a></h3> <p>The common method to switch branches is to use the <a href="https://git-scm.com/docs/git-checkout" target="_blank" rel="external">checkout</a> command. It is also a handy way to revert file changes and to create a new branch and check it out in a single command. You can also specify <code>--track</code> when creating a new branch to setup tracking for a remote.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout mybranch</span><br><span class="line"></span><br><span class="line"># revert &apos;SomeFile&apos; 2 revisions back</span><br><span class="line">git checkout mybranch~2 SomeFile</span><br><span class="line"></span><br><span class="line">git checkout -b mynewbranch</span><br></pre></td></tr></table></figure> <h3 id="git_merge" class="article-heading">git merge<a class="article-anchor" href="#git_merge" aria-hidden="true"></a></h3> <p>One of the more common methods to combine branches is the <a href="https://git-scm.com/docs/git-merge" target="_blank" rel="external">merge</a> command. The motivation is to combine a branch into another to allow continued development on the product of both. </p> <p>If a <code>merge</code> can be completed without the need to combine history (there are no local changes on a branch that can simply move forward to more recent commits) the operation is called a “fast forward merge”. Some branching strategies are strict about always creating a new merge commit and employ the <code>--no-ff</code> option to disable fast forwards.</p> <p>There is more then one way to <code>merge</code> commit history thus the <code>merge</code> command allows you to specify the “strategy” with the <code>-s</code> option. </p> <p>Finally you can cancel a <code>merge</code> in progress with the <code>--abort</code> option, this can be useful if you discover an issue during conflict resolution.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge mybranch</span><br></pre></td></tr></table></figure> <h3 id="git_rebase" class="article-heading">git rebase<a class="article-anchor" href="#git_rebase" aria-hidden="true"></a></h3> <p>One of the most liberatingly powerful, albeit dangerous, commands is <a href="https://git-scm.com/docs/git-rebase" target="_blank" rel="external">rebase</a>. <code>rebase</code> is a time machine allowing you to rewrite history.</p> <p>Much like <code>merge</code> You can cancel a <code>rebase</code> in progress with the <code>--abort</code> option. Unlike merge you also have the option to <code>--continue</code> or <code>--skip</code> after resolving conflicts.</p> <p>There are two common usages of <code>rebase</code>. One can either replace the usage of <code>merge</code> with <code>rebase</code> or can use the interactive form of <code>rebase</code> to do just about anything with commits.</p> <p>One word of caution when using <code>rebase</code> or any operations that change history. It is not good practice to change history of commits that are already pushed to a remote. This would require anybody contributing on that branch to move their commits around and pull the new version of the branch before they can continue working on it.</p> <h4 id="rebase_merge" class="article-heading">rebase merge<a class="article-anchor" href="#rebase_merge" aria-hidden="true"></a></h4> <p>When you substitute the usage of <code>merge</code> with <code>rebase</code> you will not have any merge commits, in fact you can avoid the appearance of any branching at all. I have seen many workflows that prefer to keep the project history as clean as possible by employing a <code>rebase</code> merge strategy.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase mybranch</span><br></pre></td></tr></table></figure> <p>The best way to describe how this works is to imagine that all of the changes on your current branch are stored away leaving you at the common commit where the two branches diverged. Next the branch is “fast forwarded” to the most recent commit on the target branch. Finally the stored commits are applied one by one on top of the new HEAD giving you the chance to resolve conflicts at each commit (as opposed to merge where you only resolve once forming the merge commit). The result is a fresh new set of commits (new time stamps and all, possibly modified with conflict resolution changes) giving the appearance that the changes where made in sequence after the target branch HEAD.</p> <h4 id="rebase_interactive" class="article-heading">rebase interactive<a class="article-anchor" href="#rebase_interactive" aria-hidden="true"></a></h4> <p>If you thought the previous rebase usage was powerful just wait until you try out the <code>-i</code> option. Interactive rebasing allows you to modify a todo list of changes you want to apply.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure> <p>The previous command will open an editor showing the last 3 commits (HEAD back 3 inclusive) with instructions like this:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pick cb12c49 Some commit message latest</span><br><span class="line">pick 2886624 Some commit message middle</span><br><span class="line">pick fdec2e7 Some commit message oldest</span><br><span class="line"></span><br><span class="line"># Rebase 30d7c01..fdec2e7 onto 30d7c01</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line">#  p, pick = use commit</span><br><span class="line">#  r, reword = use commit, but edit the commit message</span><br><span class="line">#  e, edit = use commit, but stop for amending</span><br><span class="line">#  s, squash = use commit, but meld into previous commit</span><br><span class="line">#  f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line">#  x, exec = run command (the rest of the line) using shell</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure> <p>The <code>#</code> denotes a comment and everything on the line after it will be ignored. </p> <hr> <p><strong>Note:</strong> The comments you see here beside each commit is just for your identification purposes and any changes now will not modify the commit message.</p> <hr> <p>The first three lines are the last three commits with the most recent on top each preceded with the default <code>pick</code> command. The next thing you may notice is the ‘Commands:’ section giving you a short and long form of each command. You can replace the <code>pick</code> on any of the three lines with one of the commands to perform a specific operation.</p> <p>The <code>pick</code> command uses the commit as is. If you wanted to just change the commit message <code>reword</code> will pause the <code>rebase</code> at the appropriate commit and prompt you with the current message to modify. </p> <p><code>edit</code> will stop the rebase at that particular commit allowing you to make any modifications you see fit (this will also happen with merge conflicts or command failures). When you are satisfied with your changes you can use <code>git rebase --continue</code> to proceed with the <code>rebase</code>.</p> <p>If you use <code>squash</code> or <code>fixup</code> you can merge the commit with the previous commit (squash on the ‘latest’ will merge it into the ‘middle’ in the above example) the only difference being that <code>fixup</code> will leave off the commit message of the squashed commit in the suggested commit message from the combined commits.</p> <p>The <code>exec</code> command allows you to run any arbitrary shell commands. This can be used to run tests at that point in the <code>rebase</code>, recompile source code, etc. If the command fails by exiting with non 0 status it will stop the <code>rebase</code> at that point allowing you to make fixes and proceed how you wish (<code>--continue</code> or <code>abort</code>).</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pick 5928aea one</span><br><span class="line">exec make test</span><br></pre></td></tr></table></figure> <p>You are also free to rearrange the commits to apply them in a different order, delete the commits (there must always be at least one commit remaining otherwise the rebase will not be performed, you can optionally use the <code>drop</code> command instead), or perform splits and other arbitrary operations by using <code>edit</code> and altering the repository as you see fit before using <code>--continue</code>. </p> <p>All in all the interactive rebase is the Swiss army knife of the <a href="https://git-scm.com/" target="_blank" rel="external">git</a> commands.</p> <h3 id="git_tag" class="article-heading">git tag<a class="article-anchor" href="#git_tag" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-tag" target="_blank" rel="external">tag</a> command can be used to manage tags. Tags can be used to mark a commit to allow easier reference later. This is commonly done for release version numbering, but you can name a tag however you like.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># list tags</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"># create an annotated tag with a message</span><br><span class="line">git tag -a v1.0 -m &apos;my version 1.0&apos;</span><br><span class="line"></span><br><span class="line"># create a lightweight tag (no metadata)</span><br><span class="line">git tag v1.0</span><br><span class="line"></span><br><span class="line"># create a tag for the commit specified</span><br><span class="line">git tag -a v1.0 aecfb21</span><br><span class="line"></span><br><span class="line"># delete a tag</span><br><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure> <p>People can later use many of the commands to reference your tag as if they would reference a commit.</p> <h3 id="git_stash" class="article-heading">git stash<a class="article-anchor" href="#git_stash" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-stash" target="_blank" rel="external">stash</a> command is used to save off your local modifications to the index and working directory restoring a clean state. This is useful for storing changes temporarily that you are not finished making in order to free you to focus on other things and freely switch branches.</p> <p>The <code>stash</code> can contain be manipulated in many ways allowing you to store multiple entries, list them, apply them and delete them.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># stash the working tree and index</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"># apply the last stashed changes and remove it from the stash</span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"># like pop but doesn&apos;t remove from the stash</span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"># clear the stash</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure> <h3 id="git_revert" class="article-heading">git revert<a class="article-anchor" href="#git_revert" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-revert" target="_blank" rel="external">revert</a> command allows you to create new commits that revert the changes of others. This is most useful when you have already pushed some changes to a remote and discover that there is an issue with the change. It is a good idea in general to not change history that has already been pushed to a remote.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># revert the last commit</span><br><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure> <h3 id="branching_not_as_common" class="article-heading">not as common<a class="article-anchor" href="#branching_not_as_common" aria-hidden="true"></a></h3> <p>Here are some other branching and patching operations that you can use.</p> <hr> <ul> <li><a href="https://git-scm.com/docs/git-apply" target="_blank" rel="external">apply</a> : Apply a patch to files and/or to the index</li> <li><a href="https://git-scm.com/docs/git-cherry-pick" target="_blank" rel="external">cherry-pick</a> : Apply changes introduced by some existing commits</li> <li><a href="https://git-scm.com/docs/git-mergetool" target="_blank" rel="external">mergetool</a> : resolve merge conflicts with a merge tool</li> </ul> <hr> <h2 id="Working_with_remotes" class="article-heading">Working with remotes<a class="article-anchor" href="#Working_with_remotes" aria-hidden="true"></a></h2> <p>Up until now we have been on our own happily altering our local repository to meet our requirements. This is a rather large departure from the lock step commit workflow of centralized version control systems. So how do you collaborate in <a href="https://git-scm.com/" target="_blank" rel="external">git</a>? The answer is with remotes.</p> <p>The following sections will focus on the commands for managing remotes and collaborating changes.</p> <h3 id="git_remote" class="article-heading">git remote<a class="article-anchor" href="#git_remote" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-remote" target="_blank" rel="external">remote</a> command is used to manage the list of remote repositories you are tracking.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># list the remotes</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"># add a new remote named myremote</span><br><span class="line">git remote add myremote git://example.com/git.git</span><br><span class="line"></span><br><span class="line"># remove remote</span><br><span class="line">git remote remove myremote</span><br></pre></td></tr></table></figure> <p>By convention <code>origin</code> is usually the name of the main remote you are tracking and if you have forked a repository you would name the remote <code>upstream</code>. This is only by convention as remotes can be named anything you wish, but it is something you will hear very often.</p> <h3 id="git_fetch" class="article-heading">git fetch<a class="article-anchor" href="#git_fetch" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-fetch" target="_blank" rel="external">fetch</a> command is used to download repository updates from a remote, without modifying the working tree (updating your .git folder).</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># fetch all remotes and prune tracked refs that no longer exist on remote</span><br><span class="line">git fetch --all --prune</span><br></pre></td></tr></table></figure> <h3 id="git_pull" class="article-heading">git pull<a class="article-anchor" href="#git_pull" aria-hidden="true"></a></h3> <p>In order to incorporate the changes from a remote you can use the <a href="https://git-scm.com/docs/git-pull" target="_blank" rel="external">pull</a> command.</p> <p>This basically performs two operations, <code>git fetch</code> followed by <code>git merge</code> you can also specify <code>--rebase</code> to perform a rebase instead.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pull the master branch from the remote named origin</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure> <h3 id="git_push" class="article-heading">git push<a class="article-anchor" href="#git_push" aria-hidden="true"></a></h3> <p>You use the <a href="https://git-scm.com/docs/git-push" target="_blank" rel="external">push</a> command to update remotes from your local repository. There are actually a decent number of options for this, but the most usual cases are below (you can also force push with <code>-f</code>… no Star Wars jokes please).</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># push to current branch&apos;s remote</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"># push to master branch of origin remote</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"># delete a remote branch</span><br><span class="line">git push origin :somebranch</span><br></pre></td></tr></table></figure> <h3 id="git_submodule" class="article-heading">git submodule<a class="article-anchor" href="#git_submodule" aria-hidden="true"></a></h3> <p>One way to incorporate an external <a href="https://git-scm.com/" target="_blank" rel="external">git</a> repository into another is by using the <a href="https://git-scm.com/docs/git-submodule" target="_blank" rel="external">submodule</a> command. This is most often used to include project dependencies while maintaining the dependency <code>submodule</code> tracked by its own remote.</p> <p>There has been a decent amount of confusion on how to use submodules effectively and removing them has traditionally been a chore, but has recently been simplified with <code>deinit</code> as referenced in <a href="http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule" target="_blank" rel="external">this Stack Overflow</a> question.</p> <p>When a project is <code>cloned</code> <a href="https://git-scm.com/" target="_blank" rel="external">git</a> doesn’t automatically download submodules so they must be manually initialized and updated. This can add an extra amount of setup for contributor’s to your project.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># display some useful information on all submodules in the project</span><br><span class="line">git submodule status --recursive</span><br><span class="line"></span><br><span class="line"># adding a submodule to &apos;somefolder&apos;</span><br><span class="line"># note: some older versions of git require you to be at the root directory</span><br><span class="line"># of the repository and specify a full path</span><br><span class="line">git submodule add git@bitbucket.org/myproject.git somefolder</span><br><span class="line"></span><br><span class="line"># separate init and update steps</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line"></span><br><span class="line"># combined step if you don&apos;t have to do any extra configuration</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure> <p>It is worth mentioning that there is another mechanism in the <a href="https://git-scm.com/" target="_blank" rel="external">git</a> arsenal to handle this situation called <a href="https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt" target="_blank" rel="external">subtree</a>. You will not currently find the documentation for this in the usual places as it is still considered a contributed feature.</p> <p>This can quickly become a very confusing topic and I plan on writing a future article on submodules vs subtrees. The main thing to know, however, is that there is another option that does not require contributor intervention and should not be confused with the “subtree merge strategy”. </p> <p>Just for kicks here is some common usage:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git subtree add --prefix somefolder git@bitbucket.org/myproject.git master --squash</span><br></pre></td></tr></table></figure> <p>I will update this post when I write the follow up, but for now you can read more about it <a href="https://developer.atlassian.com/blog/2015/05/the-power-of-git-subtree/" target="_blank" rel="external">here</a>.</p> <h2 id="Administration" class="article-heading">Administration<a class="article-anchor" href="#Administration" aria-hidden="true"></a></h2> <p><a href="https://git-scm.com/" target="_blank" rel="external">Git</a> provides several administrative commands to perform various helpful tasks on the repository.</p> <h3 id="git_clean" class="article-heading">git clean<a class="article-anchor" href="#git_clean" aria-hidden="true"></a></h3> <p>You can easily remove untracked files with the <a href="https://git-scm.com/docs/git-clean" target="_blank" rel="external">clean</a> command.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clean</span><br><span class="line"></span><br><span class="line"># also remove ignored files (good for removing build products)</span><br><span class="line">git clean -x</span><br></pre></td></tr></table></figure> <h3 id="git_gc" class="article-heading">git gc<a class="article-anchor" href="#git_gc" aria-hidden="true"></a></h3> <p><a href="https://git-scm.com/" target="_blank" rel="external">git</a> periodically does some internal house cleaning by running it’s garbage collector. You can also manually perform these operations with the <a href="https://git-scm.com/docs/git-gc" target="_blank" rel="external">gc</a> command.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git gc</span><br></pre></td></tr></table></figure> <p>Just be sure you do not have any orphaned commits you may want to restore as you will read about in the next section.</p> <h3 id="git_reflog" class="article-heading">git reflog<a class="article-anchor" href="#git_reflog" aria-hidden="true"></a></h3> <p>The <a href="https://git-scm.com/docs/git-reflog" target="_blank" rel="external">reflog</a> command can be a real life saver in times when you may have otherwise lost a commit. Some of the powerful features of git can allow you to get into situation where you are unsure of where you are in the repository history, or perhaps you just accidentally orphan a commit. Thanks to the fact that <a href="https://git-scm.com/" target="_blank" rel="external">git</a> keeps record of this information between garbage collections <code>reflog</code> can help you recover a known good state by showing your previous branch updates and even branch switches.</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure> <p>When you find the commit you are interested in you can <code>git reset --hard</code> to get back to that point in history.</p> <h3 id="admin_not_as_common" class="article-heading">not as common<a class="article-anchor" href="#admin_not_as_common" aria-hidden="true"></a></h3> <p>Here are some other administrative operations that you can use.</p> <hr> <ul> <li><a href="https://git-scm.com/docs/git-fsck" target="_blank" rel="external">fsck</a> : Verifies the connectivity and validity of the objects in the database</li> <li><a href="https://git-scm.com/docs/git-filter-branch" target="_blank" rel="external">filter-branch</a> : Lets you rewrite branches</li> <li><a href="https://git-scm.com/docs/git-instaweb" target="_blank" rel="external">instaweb</a> : Starts a webserver to allow you to browse your repository with gitweb</li> <li><a href="https://git-scm.com/docs/git-archive" target="_blank" rel="external">archive</a> : Create an archive of files from a named tree</li> <li><a href="https://git-scm.com/docs/git-bundle" target="_blank" rel="external">bundle</a> : Move objects and refs by archive</li> </ul> <hr> <h2 id="Large_File_Storage" class="article-heading">Large File Storage<a class="article-anchor" href="#Large_File_Storage" aria-hidden="true"></a></h2> <p><a href="https://git-lfs.github.com/" target="_blank" rel="external">Git Large File Storage</a> was recently released as an extension to version large files. This has traditionally been one of the largest pain points with <a href="https://git-scm.com/" target="_blank" rel="external">git</a>. I personally have seen it come to a crawl (even just calling <code>git status</code>) when the repository size grows to around 3GB with binary data.</p> <p>The typical solution has been to add a content directory to ignore, which you can track separately either with <a href="https://git-scm.com/" target="_blank" rel="external">git</a>, <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a>, <a href="https://en.wikipedia.org/wiki/Rsync" target="_blank" rel="external">rsync</a>, or any other content delivery mechanism.</p> <p>Now you have the option to:</p> <hr> <ul> <li><a href="https://git-lfs.github.com/" target="_blank" rel="external">Download git large file storage</a></li> <li>init with <code>git lfs init</code></li> <li>add file extensions to manage <code>git lfs track &quot;*.psd&quot;</code> (or edit .gitattributes)</li> </ul> <hr> <p>Then you simply use git as usual. You can read more about it <a href="https://git-lfs.github.com/" target="_blank" rel="external">here</a>.</p> <h1 id="Workflows" class="article-heading">Workflows<a class="article-anchor" href="#Workflows" aria-hidden="true"></a></h1> <p>When it comes to workflows different people tend to interface with <a href="https://git-scm.com/" target="_blank" rel="external">git</a> in different ways. I personally prefer a hybrid approach, relying mostly on the <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">CLI</a> for interacting with the repository and using <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a> for a birds eye view of commit history, stage/index management, repository bookmarks, stashes, and other more cumbersome operations.</p> <p>Some people find <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a> a bit verbose and prefer the <a href="https://desktop.github.com/" target="_blank" rel="external">GitHub GUI</a> instead, but once you are familiar with the <a href="https://en.wikipedia.org/wiki/Command-line_interface" target="_blank" rel="external">CLI</a> operations of <a href="https://git-scm.com/" target="_blank" rel="external">git</a> you will be better equipped to decipher the information you are presented in any GUI.</p> <p>What I like about <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a> is:</p> <hr> <ul> <li>It is free</li> <li>I can intuitively interpret commit history in the branch view</li> <li>I can switch projects quickly with the repository bookmarks</li> <li>There is a quick shortcut to opening a repository in the terminal</li> <li>I can view contents of a commit in many different ways</li> <li>I can easily manage the working directory, stashes, tags, remotes, branches, and submodules</li> <li>I can use blame or log and quickly track changes back to relevant commits</li> </ul> <hr> <p>I’m sure these arguments can be made for some of the other UIs as well, but I just wanted to outline a few features I like to use most in the GUI.</p> <p>Regardless of how you actually interface with <a href="https://git-scm.com/" target="_blank" rel="external">git</a>, there are several workflows that are commonly employed. This <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/" target="_blank" rel="external">atlassian tutorial</a> covers:</p> <hr> <ul> <li>Centralized Workflow : simply working directly from one primary remote</li> <li>Feature Branch Workflow : extending the centralized workflow with branches per feature</li> <li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">Gitflow</a> Workflow : a very popular strict branching model designed around project releases</li> <li>Forking Workflow : popular in the open source community, each developer has both a local and remote repository to work from collaborating primarily through pull requests</li> </ul> <hr> <h1 id="External_Links" class="article-heading">External Links<a class="article-anchor" href="#External_Links" aria-hidden="true"></a></h1> <ul> <li><a href="https://git-scm.com/doc" target="_blank" rel="external">free book, videos, reference</a></li> <li><a href="https://www.atlassian.com/git/tutorials" target="_blank" rel="external">Atlassian Tutorials</a></li> <li><a href="http://technology.mattrude.com/2010/01/run-a-secure-git-repository-on-freenas/" target="_blank" rel="external">Git on FreeNAS</a></li> </ul> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="5517142800" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>]]></content>
    <summary type="html">
    <![CDATA[Source control is a fundamental part of any software project. In fact, it can be used to facilitate versioned development of any works stored in digital media. In the following sections ]]>
    
    </summary>
    
      <category term="git" scheme="https://theknowledgeaccelerator.com/tags/git/"/>
    
      <category term="Software" scheme="https://theknowledgeaccelerator.com/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Effective C++: 55 Specific Ways to Improve Your Programs and Designs (3rd Edition)]]></title>
    <link href="https://theknowledgeaccelerator.com/2015/10/25/Review-Effective-CPP/"/>
    <id>https://theknowledgeaccelerator.com/2015/10/25/Review-Effective-CPP/</id>
    <published>2015-10-26T01:21:53.000Z</published>
    <updated>2016-03-23T17:37:30.000Z</updated>
    <content type="html"><![CDATA[<a rel="external" href="https://www.amazon.com/gp/product/0321334876/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321334876&linkCode=as2&tag=theknowlaccel-20&linkId=USV4RSHOKVH3FHSG" target="_blank"><img border="0" src="https://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=0321334876&Format=_SL250_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=theknowlaccel-20"></a><img src="https://ir-na.amazon-adsystem.com/e/ir?t=theknowlaccel-20&l=as2&o=1&a=0321334876" width="1" height="1" border="0" alt="" style="border:none!important;margin:0!important"> <div class="product-review-rating"><strong>Rating:</strong><ul><strong><li style="font-size:100%;line-height:1.6em">Highly Recommend</li></strong><li aria-hidden="true">Recommend</li><li aria-hidden="true">OK</li><li aria-hidden="true">Do Not Recommend</li><li aria-hidden="true">Avoid</li></ul></div> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="9132518405" data-ad-format="link"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script><p>The <a href="http://amzn.to/1M01OlF" target="_blank" rel="external">Effective Software Development Series</a> is quite possibly my favorite book series on software engineering. I commend Scott Meyers for his inception of the series and continued eye for quality as Consulting Editor. </p> <p>I would also go as far as to say that the publisher <a href="http://www.informit.com/imprint/index.aspx?st=61085" target="_blank" rel="external">Addison Wesley</a> is my favorite publisher in the space. Sure, I have found several gems published by <a href="http://www.oreilly.com/" target="_blank" rel="external">O’Reilly</a>, <a href="https://mitpress.mit.edu/" target="_blank" rel="external">The MIT Press</a>, <a href="http://www.delmarlearning.com/charlesriver/" target="_blank" rel="external">Charles River Media</a>, and many others, but I have found <a href="http://www.informit.com/imprint/index.aspx?st=61085" target="_blank" rel="external">Addison Wesley</a> to consistently impress me with quality works.</p> <p><a href="http://amzn.to/1MgFn7u" target="_blank" rel="external">Effective C++: 55 Specific Ways to Improve Your Programs and Designs (3rd Edition)</a> has been a fantastic edition to my library for many years now and I feel it is a great product to kick off my Review category.</p> <h1 id="What_I_Like" class="article-heading">What I like<a class="article-anchor" href="#What_I_Like" aria-hidden="true"></a></h1> <p>The <a href="http://amzn.to/1M01OlF" target="_blank" rel="external">Effective Series</a> is not only a great read cover to cover, but the format lends itself to be particularly useful as a reference. </p> <p>Each Chapter of <a href="http://amzn.to/1MgFn7u" target="_blank" rel="external">Effective C++</a> focuses on a particular topic relevant to the language and is further broken down into ‘Items’. Items are pretty well self contained and give a clear indication of purpose, example code, references where necessary, as well as finishing up with a quick summary of what to take away.</p> <h2 id="Chapter_1" class="article-heading">Chapter 1<a class="article-anchor" href="#Chapter_1" aria-hidden="true"></a></h2> <p>The theme of this chapter is familiarizing oneself with some high level concepts of the language. Scott gives a great explanation of what he refers to as the “federation of languages” in which C++ development is broken into. He brings attention to semantic constraints, the safety of using the compiler over the preprocessor, and the importance of initializing objects before they are used in OOP design.</p> <h2 id="Chapter_2" class="article-heading">Chapter 2<a class="article-anchor" href="#Chapter_2" aria-hidden="true"></a></h2> <p>The focus here is on what is affectionately known as the “Big Three” or <a href="https://en.wikipedia.org/wiki/Rule_of_three_%28C%2B%2B_programming%29" target="_blank" rel="external">Rule of three</a> in C++. It is actually a bit broader then that in the sense that he covers constructors and assignment operators in general and not just the copy variety, but it is a good term to be aware of as a C++ developer (although it has been extended as of C++11 with move semantics as mentioned in the previously linked Wikipedia entry).</p> <p>This is a great example of the care that must be taken when developing new types in C++.</p> <h2 id="Chapter_3" class="article-heading">Chapter 3<a class="article-anchor" href="#Chapter_3" aria-hidden="true"></a></h2> <p>The topic of chapter 3 is resource management. There is great coverage of the importance of <a href="https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization" target="_blank" rel="external">RAII</a> practices and some useful advice on how to design such types.</p> <h2 id="Chapter_4" class="article-heading">Chapter 4<a class="article-anchor" href="#Chapter_4" aria-hidden="true"></a></h2> <p>In this chapter Scott covers some general design guidelines for more robust code. I often find myself quoting the title of Item 18: </p> <blockquote><p>Make interfaces easy to use correctly and hard to use incorrectly.</p></blockquote> <p>It is amazing how powerful a concept this is and how often it is neglected. He then gives advice on type design and type conversion and even includes a discussion of the utility (and complexities) of adding a non-throwing swap method to some types.</p> <h2 id="Chapter_5" class="article-heading">Chapter 5<a class="article-anchor" href="#Chapter_5" aria-hidden="true"></a></h2> <p>Chapter 5 covers many useful implementation details. This includes optimizations, both in terms of runtime and compile time, as well as exception safety and maintainability.</p> <h2 id="Chapter_6" class="article-heading">Chapter 6<a class="article-anchor" href="#Chapter_6" aria-hidden="true"></a></h2> <p>The focus here is on Object-Oriented design and inheritance in C++. OOP is definitely not the only kid on the block as far as design paradigms go, but the coverage here is fantastic for those situations where it is employed. The coverage includes “is-a”, “has-a”, and “is-implemented-in-terms-of” relationships, interface and implementation inheritance combinations, and several other best practices for C++.</p> <h2 id="Chapter_7" class="article-heading">Chapter 7<a class="article-anchor" href="#Chapter_7" aria-hidden="true"></a></h2> <p>Chapter 7 introduces the reader to the abstract world of generic programming. This only begins the touch the surface of the power of compile time programming practices in C++, but it is a great primer for future reading on the subject.</p> <h2 id="Chapter_8" class="article-heading">Chapter 8<a class="article-anchor" href="#Chapter_8" aria-hidden="true"></a></h2> <p>This chapter explores the powerful concept of customizing new and delete in C++. Scott discusses when it makes sense to do so, as well as what needs to be done to do it effectively.</p> <h2 id="Chapter_9" class="article-heading">Chapter 9<a class="article-anchor" href="#Chapter_9" aria-hidden="true"></a></h2> <p>Chapter 9 is focused on a few miscellaneous topics that didn’t fit into the umbrella of the previous chapters. There is a discussion on compiler warns, the STL and TR1, as well as what is probably the most popular library of reusable open source C++ goodness… Boost.</p> <h1 id="What_I_Don't" class="article-heading">What I Don't<a class="article-anchor" href="#What_I_Don't" aria-hidden="true"></a></h1> <p>There honestly isn’t very much at all I dislike about <a href="http://amzn.to/1MgFn7u" target="_blank" rel="external">Effective C++</a>. If I was to get really nit picky I could note the lack of differentiation when naming member variables as I normally prefer them to stand out from local variables or parameters. This, however, is obviously a choice of style and hardly a valid fault.</p> <p>I happen to own the paperback version, so I can’t speak to the formatting of code snippets on the Kindle edition, but I suppose this is something to take into consideration if purchasing for eReaders. I have seen a few reviews on Amazon that seem to suggest this as a reason for giving lower marks.</p> <h1 id="What_I_Recommend" class="article-heading">What I Recommend<a class="article-anchor" href="#What_I_Recommend" aria-hidden="true"></a></h1> <p>If you are a C++ developer and you have not already purchased this book, I say to you… What are you waiting for?</p> <p>Even with the further development of the language and Scott’s more recent release <a href="http://amzn.to/1O5IghP" target="_blank" rel="external">Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14 1st Edition</a> (published this time by <a href="http://www.oreilly.com/" target="_blank" rel="external">O’Reilly</a>), <a href="http://amzn.to/1MgFn7u" target="_blank" rel="external">Effective C++</a> remains relevant and is indeed worth the investment. You can check out this topic on <a href="http://stackoverflow.com/questions/17866735/is-effective-c-still-effective" target="_blank" rel="external">Stack Overflow</a> if you need further convincing.</p> <iframe style="width:120px;height:240px;display:block;margin:0 auto" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=theknowlaccel-20&marketplace=amazon&region=US&placement=0321334876&asins=0321334876&linkId=T7CMIDGEOF3HDN22&show_border=false&link_opens_in_new_window=true"> </iframe>]]></content>
    <summary type="html">
    <![CDATA[Rating: Highly Recommend]]>
    
    </summary>
    
      <category term="C++" scheme="https://theknowledgeaccelerator.com/tags/C/"/>
    
      <category term="book" scheme="https://theknowledgeaccelerator.com/tags/book/"/>
    
      <category term="programming" scheme="https://theknowledgeaccelerator.com/tags/programming/"/>
    
      <category term="review" scheme="https://theknowledgeaccelerator.com/tags/review/"/>
    
      <category term="Review" scheme="https://theknowledgeaccelerator.com/categories/Review/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSONP in Dart]]></title>
    <link href="https://theknowledgeaccelerator.com/2015/10/22/JSONP-in-Dart/"/>
    <id>https://theknowledgeaccelerator.com/2015/10/22/JSONP-in-Dart/</id>
    <published>2015-10-23T01:27:05.000Z</published>
    <updated>2016-03-23T17:44:42.000Z</updated>
    <content type="html"><![CDATA[<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="4283516409" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script><p><img src="jsonp_in_dart.svg" alt=""></p> <p>While working on a small demo in <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a>, I required access to external web services to demonstrate a system’s flexibility. The objective was to obtain stock information given a company ticker symbol.</p> <p>I came across several APIs including a list from <a href="http://www.programmableweb.com/news/96-stocks-apis-bloomberg-nasdaq-and-etrade/2013/05/22" target="_blank" rel="external">programmableweb.com</a>, <a href="https://developers.google.com/finance/?hl=en" target="_blank" rel="external">google finance API</a>, <a href="http://dev.markitondemand.com/MODApis/" target="_blank" rel="external">markit on demand API</a>, and <a href="http://stackoverflow.com/questions/27543776/yahoo-finance-webservice-api" target="_blank" rel="external">Yahoo! Finance webservice API</a>. The programmableweb options seemed pretty lack luster, markit on demand’s Terms of use were prohibitive and with google’s offering deprecated that left me with Yahoo!.</p> <p>The following will explain why I chose <a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a> as a solution to this problem along with how to accomplish the task entirely through <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a> with no external <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="external">JavaScript</a>.</p> <h1 id="Why_use_JSONP" class="article-heading">Why use JSONP?<a class="article-anchor" href="#Why_use_JSONP" aria-hidden="true"></a></h1> <p>I started to look at Yahoo! and was surprised to find little to no documentation on their webservices API. In fact the link I chose to reference the API above was from <a href="https://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a> (always a useful resource). The example given was enough for me to gather the data I required, but now I needed to know how I must request it.</p> <h2 id="Verifying_CORS_Compliance" class="article-heading">Verifying CORS compliance<a class="article-anchor" href="#Verifying_CORS_Compliance" aria-hidden="true"></a></h2> <p>I first needed to check if the API was <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="external">CORS</a> compliant. One of the constraints of the project was that I couldn’t use a proxy server to make the cross domain requests so my options were limited to what I could do in the browser.</p> <p>One option to verify compliance is to use the handy utility <a href="http://curl.haxx.se/" target="_blank" rel="external">curl</a> as <a href="http://stackoverflow.com/questions/12173990/how-can-you-debug-a-cors-request-with-curl" target="_blank" rel="external">described here</a>. On OS X <a href="http://curl.haxx.se/" target="_blank" rel="external">curl</a> is installed by default. If your Unix flavor doesn’t have curl installed you can use your relevant package manager or visit the <a href="http://curl.haxx.se/" target="_blank" rel="external">curl</a> website for instructions, same goes for Windows minus the package manager of coarse.</p> <p>You can easily check for compliance by running this snippet in the terminal (replace the googleapis url with your target url):</p> <pre><code>curl -<span class="constant">H </span><span class="string">"Origin: http://mydomain.com"</span> --head\ 
<span class="symbol">https:</span>/<span class="regexp">/www.googleapis.com/discovery</span><span class="regexp">/v1/apis</span>\?fields\=
</code></pre><p>If the site is compliant like the googleapis above you will see the <code>Access-Control-Allow-Origin</code> header in the response. I ran the test for Yahoo! to discover no <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="external">CORS</a> support.</p> <p>If a web service is not <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="external">CORS</a> compliant the user agent will not allow you to make direct cross domain requests. You can always proxy behind a server that is not bound by the same safety net as the browser, but since this is not an option for my purpose the next logical fall back is the somewhat hacky approach known as <a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a>.</p> <h2 id="Verifying_JSONP_Compliance" class="article-heading">Verifying JSONP compliance<a class="article-anchor" href="#Verifying_JSONP_Compliance" aria-hidden="true"></a></h2> <p><a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a> (JSON with padding) is a technique that leverages the fact that script tags are allowed to request resource from different domains. It isn’t enough, however, to request JSON data directly via the script tag as the browser will simply throw a syntax error upon interpreting the raw JSON data as a block. </p> <p><a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a> works by utilizing an agreed upon function that the server constructs a call to with the JSON data as a parameter instead of the usual naked JSON response. Once the script is downloaded and interpreted it is executed calling the client local function allowing it to parse the JSON data.</p> <p>By convention the method name is normally passed to the server as a query parameter often named <code>callback</code> or <code>jsonp</code>. If you do not find API documentation it is worth trying a few variations. The output you receive should then look like a function invocation taking the JSON data as a parameter. Luckily Yahoo! used the fairly standard convention of <code>callback</code> so I had confirmation on my first try.</p> <h2 id="A_word_of_caution" class="article-heading">A word of caution<a class="article-anchor" href="#A_word_of_caution" aria-hidden="true"></a></h2> <p>It is important to realize that you may expose your users to security vulnerabilities by using this approach if you do not trust the remote resource. A response could be constructed that would allow the injection of any arbitrary content into the site and bypass <a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">Same-origin policy</a>. If you plan on utilizing any sensitive user information it would be wise to avoid this technique. This is why <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="external">CORS</a> was created after all.</p> <h1 id="Initialization_in_Dart" class="article-heading">Initialization in Dart<a class="article-anchor" href="#Initialization_in_Dart" aria-hidden="true"></a></h1> <p>I normally prefer to begin a new project with an initial discovery phase. In this case I wanted to see if there was a native <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a> solution to <a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a> or simply a common pattern. </p> <p>I came across <a href="http://blog.sethladd.com/2012/03/jsonp-with-dart.html" target="_blank" rel="external">Seth Ladd’s blog post</a> on the subject. If you are looking for information on something in <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a> it is actually a pretty sure bet you will land on one of the many bread crumbs Seth has left behind. There is also a decent chance, however, that there are breaking API changes since the solution you have found. The post was dated March 16, 2012 so it was no surprise to me that some of the syntax was no longer relevant. </p> <p>The solution also proposed a combination of <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="external">JavaScript</a> and <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a>, which was not in the scope of my project. I instead came up with a more updated approach that also indirectly utilizes <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="external">JavaScript</a> on the page via <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a>.</p> <h3 id="Update1" class="article-heading">Update:<a class="article-anchor" href="#Update1" aria-hidden="true"></a></h3> <p>I came across a <a href="http://stackoverflow.com/a/22761363/2105636" target="_blank" rel="external">simpler approach</a> to combine the two steps below (<a href="#Register_the_listener">Register the listener</a> and <a href="#Creating_the_callback">Creating the callback</a>) if you are using <a href="https://api.dartlang.org/1.12.2/dart-js/dart-js-library.html" target="_blank" rel="external">dart:js</a>. I will keep the existing solution here as well since it is still relevant as a fallback. If you like you can skip to <a href="#The_Dart_JS_Approach">The dart:js Approach</a>.</p> <h2 id="Register_the_listener" class="article-heading">Register the listener<a class="article-anchor" href="#Register_the_listener" aria-hidden="true"></a></h2> <p>The first part of the initialization portion of my approach consists of registering for the window message event:</p> <pre><code><span class="tag">window</span><span class="class">.onMessage</span><span class="class">.listen</span>(<span class="tag">dataReceived</span>);
</code></pre><p>At the time of my writing the <a href="https://api.dartlang.org/133490/dart-html/dart-html-library.html" target="_blank" rel="external">dart:html</a> library exposes the <code>onMessage</code> property of the <code>window</code> object. The property returns a <code>Stream&lt;MessageEvent&gt;</code> object which you can register to listen to events with a callback that receives a <code>MessageEvent</code>. We will look at the <code>dataReceived</code> method in the section <a href="#Handle_The_Response">Handle The Response</a> below.</p> <h2 id="Creating_the_callback" class="article-heading">Creating the callback<a class="article-anchor" href="#Creating_the_callback" aria-hidden="true"></a></h2> <p>The last part of initialization is to create the callback function in <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="external">JavaScript</a>. A simple approach to inject the method and avoid name mangling is to dynamically create a script tag and set the <code>innerHtml</code> directly within <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a>.</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _createScriptTag()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">String</span> requestString = <span class="string">"""function callbackForJsonpApi(s) &#123;</span><br><span class="line">    	s.target="dartJsonHandler";</span><br><span class="line">    	window.postMessage(JSON.stringify(s), '*');</span><br><span class="line">    	&#125;"""</span>;</span><br><span class="line">    ScriptElement script = <span class="keyword">new</span> ScriptElement();</span><br><span class="line">    script.innerHtml = requestString;</span><br><span class="line">    <span class="built_in">document</span>.body.children.add(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>The contents of <code>requestString</code> are fairly simple. I use the triple quoted string notation in <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a> to avoid escaping special characters. I tag the parameter value with a <code>target</code> identifier to allow this approach to be shared by other portions of the logic (you can obviously leave this out or come up with a more fully qualified name). Finally I use <code>window.postMessage</code> to invoke the previously registered <code>dataReceived</code> method. The script is ready as soon as it is added to the <a href="https://en.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="external">DOM</a> and interpreted by the user agent.</p> <h1 id="The_Dart_JS_Approach" class="article-heading">The dart:js Approach<a class="article-anchor" href="#The_Dart_JS_Approach" aria-hidden="true"></a></h1> <p>As mentioned above, there is a simpler and more elegant way to create the callback using <a href="https://api.dartlang.org/1.12.2/dart-js/dart-js-library.html" target="_blank" rel="external">dart:js</a>. You can avoid the need to use messages and instead write the following callback in dart directly:</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context[<span class="string">'callbackForJsonpApi'</span>] = (JsObject jsonData) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Process JSON data here...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> <h1 id="Make_The_Request" class="article-heading">Make The Request<a class="article-anchor" href="#Make_The_Request" aria-hidden="true"></a></h1> <p>Making the request is simple and uses a similar technique as before, only this time I set the <code>src</code> attribute of the script tag:</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> getStockQuote(<span class="built_in">String</span> tickerId)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="built_in">String</span> requestString = <span class="string">"http://finance.yahoo.com/webservice/v1/symbols/"</span> + tickerId + <span class="string">"/quote?format=json&amp;callback=callbackForJsonpApi"</span>;</span><br><span class="line"></span><br><span class="line">    ScriptElement script = <span class="keyword">new</span> ScriptElement();</span><br><span class="line">    script.src = requestString;</span><br><span class="line">    <span class="built_in">document</span>.body.children.add(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>As soon as this is added to the <a href="https://en.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="external">DOM</a> the request is made bypassing the <a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">Same-origin policy</a> restriction. You could also recycle the <code>ScriptElement</code> to make future requests rather then creating a new one each time.</p> <h1 id="Handle_The_Response" class="article-heading">Handle The Response<a class="article-anchor" href="#Handle_The_Response" aria-hidden="true"></a></h1> <p>The last thing we need to do is create the <code>dataReceived</code> method in <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a> to handle the response. This logic can be as simple or complex as the situation requires. The <code>MessageEvent</code> payload is on the <code>data</code> property and can be cast to <code>String</code> and handled however you desire. I had mentioned previously that I tagged the payload with <code>target</code> so you may end up switching on this as well, provided it doesn’t clash with the API you use in which case you can more fully qualify the value.</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> dataReceived(MessageEvent e) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">String</span> s = (e.data <span class="literal">as</span> <span class="built_in">String</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle the response</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h1 id="Conclusion" class="article-heading">Conclusion<a class="article-anchor" href="#Conclusion" aria-hidden="true"></a></h1> <p>There are many ways to accomplish cross domain requests depending on your requirements. I hope you have found this information useful in utilizing <a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a> as a solution natively in <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a>.</p> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="5517142800" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>]]></content>
    <summary type="html">
    <![CDATA[While working on a small demo in Dart, I required access to external web services to demonstrate a system’s flexibility. The objective was to obtain stock information given a ]]>
    
    </summary>
    
      <category term="dart" scheme="https://theknowledgeaccelerator.com/tags/dart/"/>
    
      <category term="javascript" scheme="https://theknowledgeaccelerator.com/tags/javascript/"/>
    
      <category term="scripting" scheme="https://theknowledgeaccelerator.com/tags/scripting/"/>
    
      <category term="web" scheme="https://theknowledgeaccelerator.com/tags/web/"/>
    
      <category term="Software" scheme="https://theknowledgeaccelerator.com/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[faviconbuild. A bash/batch scripting tutorial]]></title>
    <link href="https://theknowledgeaccelerator.com/2015/10/10/faviconbuild/"/>
    <id>https://theknowledgeaccelerator.com/2015/10/10/faviconbuild/</id>
    <published>2015-10-11T01:41:38.000Z</published>
    <updated>2016-03-23T17:43:50.000Z</updated>
    <content type="html"><![CDATA[<p><img src="favicon.png" alt=""></p> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="9132518405" data-ad-format="link"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script><p>A simple problem; while developing a website you want to add a nice little favorites icon (favicon) for that extra polished look, or perhaps you just want to stop those annoying 404 errors regarding favicon.ico that the browser searches for by default. Shouldn’t be a big deal right? </p> <p>You look online for a simple build script with minimal dependencies that can run offline and doesn’t rely on any third party services, but you come up empty. This is where I was a few days ago. I decided this was a great time to work on a simple <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a>/<a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> script to solve a problem while giving an example of how you can write a cross platform utility to help with build automation for a project. For this I created <a href="http://theknowledgeaccelerator.com/faviconbuild/">faviconbuild</a>.</p> <h1 id="Gathering_Information" class="article-heading">Gathering information<a class="article-anchor" href="#Gathering_Information" aria-hidden="true"></a></h1> <p>The first step was to gather as much information as I could on what favicon variants there are and how to add them to the site. I had already chosen the technology I wanted to use, as I have written many build systems using <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> and/or <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> files depending on the platform of the build machine. It was also a no-brainer for me to use <a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="external">ImageMagick</a> as a cross platform, open source solution for image manipulation via command line.</p> <p>The astute reader may be aware of a more modern technology that aims to replace the usage of <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> in Windows, the <a href="https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx" target="_blank" rel="external">PowerShell</a>, but for this simple application I feel it unwarranted. The old way of doing things does not require the .NET framework and will be supported for years to come.</p> <p>I started looking for any standards information about favicons, and unsurprisingly, as in many web based technologies, this is sort of a grey area. I would like to spare the reader the details of favicon history, but will include further reading in the <a href="#External_links">External links</a> section below. The main take away is that there are many vendor specific variants and this list can grow at any time. This was the reason I wanted to build something that was simple and easy to extend as new information was discovered.</p> <h1 id="The_Bash_Script" class="article-heading">The Bash Script<a class="article-anchor" href="#The_Bash_Script" aria-hidden="true"></a></h1> <p>There is tremendous power in shell scripts and as a software engineer this is just one of the many features I enjoy so much about development in a Unix environment. <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> is a popular variant of Unix shell that is used by default in Linux and Mac OS X as well as <a href="https://www.cygwin.com/" target="_blank" rel="external">Cygwin</a> for Windows.</p> <h2 id="Bash_Basics" class="article-heading">Bash Basics<a class="article-anchor" href="#Bash_Basics" aria-hidden="true"></a></h2> <p>It is very simple to get started with <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> scripting; you only need a text file commonly created with the <code>.sh</code> extension that begins with <code>#!/bin/bash</code>. You can create files any number of ways but a simple way from the terminal is the <code>touch</code> command.</p> <pre><code><span class="tag">touch</span> <span class="tag">faviconbuild</span><span class="class">.sh</span>
</code></pre><p>once you have created the file you can even edit it via the terminal using vi, nano, emacs, or any other terminal based text editors. If you are looking for a more UI driven editor I would recommend <a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime</a>. <a href="https://developer.apple.com/xcode/" target="_blank" rel="external">XCode</a> and <a href="https://eclipse.org/downloads/" target="_blank" rel="external">Eclipse</a> are also popular <a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank" rel="external">IDEs</a> depending on the technology of the project, and there are <a href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments" target="_blank" rel="external">several others</a> out there to explore. The following will load a file named faviconbuild.sh in the current director in vi (if it doesn’t yet exist you will be able to create it later).</p> <pre><code><span class="keyword">vi</span> faviconbuild.<span class="keyword">sh</span>
</code></pre><p>Vi is very powerful and full featured so I will not go through much of it now. The basic idea is that you have different modes and by default you are in <strong>command mode</strong> here you can type short commands to perform various operations. In order to type text you need to be in <strong>input mode</strong> by pressing <code>i</code> now you can type:</p> <pre><code><span class="shebang">#!/bin/bash</span>
<span class="built_in">echo</span> Hello World!
</code></pre><p>Next in order to save you need to be back in <strong>command mode</strong> by pressing the <code>esc</code> key. A handy shortcut to save is <code>SHIFT+ZZ</code> and the file you opened will be saved (or created if it didn’t yet exist) and you will be back at the terminal.</p> <p>In order to execute such a file you will also need to change the permissions to allow execution. In Unix this is commonly done with the <a href="https://en.wikipedia.org/wiki/Chmod" target="_blank" rel="external">chmod</a> command.</p> <p>Ex:</p> <pre><code><span class="tag">chmod</span> +<span class="tag">x</span> <span class="tag">faviconbuild</span><span class="class">.sh</span>
</code></pre><p>OR</p> <pre><code>chmod <span class="number">755</span> faviconbuild.sh
</code></pre><p>You can now execute the script by file name in the terminal. If you are running a script called faviconbuild.sh from the same directory you are at in the terminal:</p> <pre><code>./faviconbuild.<span class="keyword">sh</span>
</code></pre><p>If you were following along you would receive the following output:</p> <pre><code><span class="variable">Hello</span> <span class="variable">World</span><span class="exclamation_mark">!</span>
</code></pre><p>Some other common commands for navigating within a terminal are <code>cd</code> to change directory, <code>pwd</code> to print the working directory (aka where you are at in the file system), and <code>ls</code> to list the contents of folders. In <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> you can hit <code>Tab</code> twice to see a list of all commands available, or look online for the most commonly used. Typing <code>man</code> followed by the command will bring up the <strong>man page</strong> (short for manual page) for that command, this is a helpful way to see usage information.</p> <p>Here is some common syntax in a <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> script:</p> <pre><code><span class="comment">#comment's start with a #</span>

<span class="comment"># variable assignment</span>
Variable=Some

<span class="comment"># use the variable with $</span>
<span class="built_in">echo</span> <span class="variable">$Variable</span>
<span class="comment"># or optionally use ${} </span>
<span class="comment"># which becomes mandatory if you try to append without spaces</span>
<span class="built_in">echo</span> <span class="variable">${Variable}</span>thing

<span class="comment"># Conditional branching</span>
<span class="keyword">if</span> [ <span class="string">"<span class="variable">$(uname)</span>"</span> == <span class="string">"Darwin"</span> ]; <span class="keyword">then</span>
    <span class="comment"># do mac stuff</span>
<span class="keyword">elif</span> [ <span class="string">"<span class="variable">$(expr substr $(uname -s)</span> 1 5)"</span> == <span class="string">"Linux"</span> ]; <span class="keyword">then</span>
    <span class="comment"># do linux stuff</span>
<span class="keyword">fi</span>

<span class="comment"># functions</span>
<span class="function"><span class="title">sayhello</span></span>()
{
    <span class="built_in">echo</span> Hello!
}

<span class="comment"># calling them</span>
sayhello
</code></pre><h2 id="faviconbuild_Initialization_Bash" class="article-heading">faviconbuild Initialization in Bash<a class="article-anchor" href="#faviconbuild_Initialization_Bash" aria-hidden="true"></a></h2> <p>If you look at the source for <a href="https://github.com/matthewsanders/faviconbuild/blob/master/faviconbuild.sh" target="_blank" rel="external">faviconbuild.sh</a> (version 1.0.0) you will notice it is broken into sections. The top of the file handles initialization tasks.</p> <p>The first part of initialization in the script is to handle path resolution. This is not mandatory in a <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> script by any means, but I wanted a way to build relative paths from the directory in which faviconbuild.sh was ran, regardless of where it was executed from as well as taking <a href="https://en.wikipedia.org/wiki/Symbolic_link" target="_blank" rel="external">symlinks</a> into account. I ended up using the solution found on <a href="https://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in/246128#246128" target="_blank" rel="external">this Stack Overflow question</a>.</p> <p>The next part of initialization has to do with setting default variables used in the script, many of which are overriden later via arguments to the script itself.</p> <p>The final part of initialization uses some platform sniffing logic to set a relative path to a default directory for the platform specific <a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="external">ImageMagick</a> executable.</p> <h2 id="faviconbuild_Functions_Bash" class="article-heading">faviconbuild Functions in Bash<a class="article-anchor" href="#faviconbuild_Functions_Bash" aria-hidden="true"></a></h2> <p>There are five functions in <a href="https://github.com/matthewsanders/faviconbuild/blob/master/faviconbuild.sh" target="_blank" rel="external">faviconbuild.sh</a> (version 1.0.0).</p> <p><code>usage()</code> simply echos the version and copyright information as well as help command syntax. It is invoked by the command parsing logic.</p> <p><code>convertImage()</code> takes four parameters: the source file, width and optionally height and background color. This is the main function for calling <a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="external">ImageMagick’s</a> convert. It is a simple start but I could see the internals of this method changing over time if there are more requirements.</p> <p><code>createIcon()</code> takes a variable number of parameters to specify the widths (and implied height as it currently assumes square images) of the images to use as the source for the icon file. I again created this method in v1 of faviconbuild to fill the immediate need at the time and can envision it becoming much more flexible.</p> <p>Finally <code>createLink</code> and <code>createMeta</code> are utility methods for creating the html markup required and optionally create the required image using <code>convertImage()</code>.</p> <h2 id="faviconbuild_Command_Parseing_Bash" class="article-heading">faviconbuild Command Parsing in Bash<a class="article-anchor" href="#faviconbuild_Command_Parseing_Bash" aria-hidden="true"></a></h2> <p>It is a common convention for Unix terminal applications to allow parameters and often provide both a meaningfully named option switch as well as a shorthand version. I wanted to keep with this convention as I find it very useful.</p> <p>Example (Note: these both do the same thing):</p> <pre><code>./faviconbuild.<span class="keyword">sh</span> -<span class="literal">h</span>
./faviconbuild.<span class="keyword">sh</span> --<span class="keyword">help</span>
</code></pre><p>In the command line parsing section of <a href="https://github.com/matthewsanders/faviconbuild/blob/master/faviconbuild.sh" target="_blank" rel="external">faviconbuild.sh</a> (version 1.0.0) you will notice a while loop that switches on the input parameters to the application while considering both the shorthand and longer form. It then uses shift to consume the parameter and move to the next. Many of the parameters also use shift to consume parameters they expect, except for the help and wild-card catchall which invokes the <code>usage()</code> function and exits the program.</p> <p>The code looks as follows:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># command line parsing</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$1</span>"</span> != <span class="string">""</span> ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        -o | --outdir )         <span class="built_in">shift</span></span><br><span class="line">                                outdir=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        -k | --imagemagick )    <span class="built_in">shift</span></span><br><span class="line">                                imagemagickdir=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        <span class="operator">-s</span> | --subdir )         <span class="built_in">shift</span></span><br><span class="line">                                subdir=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        -ls | --linksubdir )    <span class="built_in">shift</span></span><br><span class="line">                                linksubdir=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        -i | --source )         <span class="built_in">shift</span></span><br><span class="line">                                <span class="built_in">source</span>=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        -c | --color )          <span class="built_in">shift</span></span><br><span class="line">                                color=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        <span class="operator">-e</span> | --ext )            <span class="built_in">shift</span></span><br><span class="line">                                outext=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        -p | --parsed )         <span class="built_in">shift</span></span><br><span class="line">                                parsed=<span class="variable">$1</span></span><br><span class="line">                                ;;</span><br><span class="line">        -h | --help )           usage</span><br><span class="line">                                <span class="built_in">exit</span></span><br><span class="line">                                ;;</span><br><span class="line">        * )                     usage</span><br><span class="line">                                <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure> <p>The last part of this section does some minor directory sanitation.</p> <h2 id="faviconbuild_Main_Loop_Bash" class="article-heading">faviconbuild Main loop in Bash<a class="article-anchor" href="#faviconbuild_Main_Loop_Bash" aria-hidden="true"></a></h2> <p>The last section of the file handles the main logic flow. First the output directory is created using <code>mkdir -p</code> the -p switch is to ensure it will create intermediate directories as well. Then it removes the output markup file with <code>rm -f</code>.</p> <p>The interesting logic here is within the main loop which consists of a while loop that reads each line of an input file. We will visit this more in the section <a href="#The_Parse_File">The Parse File</a> below, but the general idea is to replace specific tokens to generate a <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> formatted string and pass that to the <code>eval</code> command to execute it.</p> <p>For the sake of simplicity I chose tokens that wouldn’t clash with either script environment, and also made the parse file biased toward <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> as <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> is much more flexible and easier to manipulate the input.</p> <p>The string manipulation format for the <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> file is <code>result_string=&quot;${input_string//token_to_replace/token_to_replace_with}&quot;</code> to replace all instances of the token. You can find more information on string manipulation <a href="http://tldp.org/LDP/abs/html/string-manipulation.html" target="_blank" rel="external">here</a>.</p> <h1 id="The_Batch_Script" class="article-heading">The Batch Script<a class="article-anchor" href="#The_Batch_Script" aria-hidden="true"></a></h1> <p>I once was a major advocate of Windows, coming from a background in C/C++/C# and assembly in real time simulation and gaming. I have since joined the Unix side and prefer to work in those environments now instead. This in general is a topic for another post, but I figured I would mention this as I refer to supporting the odd ball OS. I say odd ball here because Windows is a proprietary creature of its own. I used to be of the mindset that Mac and Linux environments where the weird ones, but since the release of OSX it seems like just about every platform is now Unix based with the obvious exception of Windows (there are <a href="https://en.wikipedia.org/wiki/List_of_operating_systems#Non-Unix-like" target="_blank" rel="external">several others</a> out there as well, but for the market of personal computing I will call them the minority).</p> <p>I normally develop Windows application today from a <a href="https://en.wikipedia.org/wiki/Virtual_machine" target="_blank" rel="external">VM</a> such as <a href="https://www.virtualbox.org/" target="_blank" rel="external">VirtualBox</a> although I have also used <a href="https://www.apple.com/support/bootcamp/" target="_blank" rel="external">bootcamp</a> to install Windows natively on my MacBook Pro and even, on occasion, install it on some of my spare hardware. The VM approach actually made it very easy to develop and test the <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> file while I was also developing the <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> script all from the comfort of my laptop.</p> <p>I could have forgone the creation of a <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> file and simply required the Windows user to install a Unix like environment such as <a href="https://www.cygwin.com/" target="_blank" rel="external">Cygwin</a>, but that just didn’t seem right. I figured it would be a nice exercise to show how one could take a more direct cross platform approach to terminal/command line scripting. I also simply like to keep an open mind about the platforms on which I develop; I do still use the OS on occasion although it is primarily for helping family backup and restore their computers, or for a client that needs to support it.</p> <p>So without further ado… Lets get to the <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> File!</p> <h2 id="Batch_Basics" class="article-heading">Batch Basics<a class="article-anchor" href="#Batch_Basics" aria-hidden="true"></a></h2> <p><a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> files require even less work then <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a>, you simply create a normal text file and change the extension to .bat. The OS will now associate the file as a <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> file. There is no step to change the permissions of the file. </p> <p>You will also notice I didn’t mention any special command line based text editors as Windows doesn’t really have a reliable set of utilities such as this across all versions. You will not find a decent text editor for development on Windows at all by default, I would recommend something like <a href="https://notepad-plus-plus.org/" target="_blank" rel="external">NotePad++</a> for the basics and if you start developing more frequently <a href="https://www.visualstudio.com/en-us/visual-studio-homepage-vs.aspx" target="_blank" rel="external">Visual Studio</a> is an excellent <a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank" rel="external">IDE</a>. Unlike many other <a href="https://en.wikipedia.org/wiki/Integrated_development_environment" target="_blank" rel="external">IDEs</a> the full version is not free but the free express editions are still very useful.</p> <p>You can navigate folders in <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> similar to how we did previously with <code>cd</code> changing directory and <code>dir</code> showing the contents. You can obviously find more information online such as this <a href="https://en.wikipedia.org/wiki/List_of_DOS_commands" target="_blank" rel="external">wikipedia entry</a>.</p> <p>There is no standard header information for a <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> file and you can begin writing commands on the first line. It is pretty common practice, however, to start with the command <code>@echo off</code> to disable the verbose echoing of all commands. It can, however, come in handy to comment out this line while debugging.</p> <p>Here is some common syntax in a <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> script:</p> <pre><code><span class="comment">REM comment's start with REM</span>

<span class="comment">REM variable assignment requires set</span>
<span class="keyword">set</span> Variable=Some

<span class="comment">REM use the variable enclosed in %</span>
<span class="keyword">echo</span> <span class="envvar">%Variable%</span>
<span class="comment">REM unless it is an argument which are numbered and require only one %</span>
<span class="keyword">echo</span> %<span class="number">1</span>

<span class="comment">REM Conditional branching</span>
<span class="comment">REM <span class="doctag">Note:</span> This is very very touchy.  There really isn't much of a generic </span>
<span class="comment">REM if else if construct in Batch land.</span>
<span class="flow">if</span> <span class="flow">exist</span> filename.txt (
    <span class="keyword">echo</span> File is here
) <span class="flow">else</span> ( 
    <span class="keyword">echo</span> File <span class="flow">not</span> found
)

<span class="comment">REM There also isn't really a concept of functions</span>
<span class="comment">REM but you can get equivalent functionality like this</span>
:sayhello
<span class="keyword">setlocal</span>
    <span class="keyword">echo</span> Hello!
<span class="keyword">endlocal</span>
<span class="flow">goto</span> :eof

# calling them
<span class="flow">call</span> :sayhello
</code></pre><h2 id="faviconbuild_Initialization_Batch" class="article-heading">faviconbuild Initialization in Batch<a class="article-anchor" href="#faviconbuild_Initialization_Batch" aria-hidden="true"></a></h2> <p>The initialization in <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> is a bit more simplistic then what we reviewed previously, mainly because I didn’t bother resolving symlinks for <a href="https://github.com/matthewsanders/faviconbuild/blob/master/faviconbuild.bat" target="_blank" rel="external">faviconbuild.bat</a> (version 1.0.0) as they are far less common on Windows. They are, however, possible with the <a href="http://ss64.com/nt/mklink.html" target="_blank" rel="external">mklink</a> command so I will probably add this later.</p> <p>This line <code>set batdir=%~dp0</code> uses the <code>%0</code> parameter of the <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> file which is the current executing script. The <code>~dp</code> portion of the variable are modifiers which in this case specifies drive letter and path. You can use <code>for /?</code> to show more information related to these modifiers or go <a href="http://ss64.com/nt/syntax-args.html" target="_blank" rel="external">here</a> for more info.</p> <p>The rest of initialization is similar to the <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> case with the exception of the call to <code>goto :commandlineparsestart</code>. This is required as you need to explicitly direct program flow in a <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> file.</p> <h2 id="faviconbuild_Functions_Batch" class="article-heading">faviconbuild Functions in Batch<a class="article-anchor" href="#faviconbuild_Functions_Batch" aria-hidden="true"></a></h2> <p>The <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> file consists of the same functions as before only with a different syntax. Take a look at <a href="https://github.com/matthewsanders/faviconbuild/blob/master/faviconbuild.bat" target="_blank" rel="external">faviconbuild.bat</a> for the specifics.</p> <h2 id="faviconbuild_Command_Parseing_Batch" class="article-heading">faviconbuild Command Parsing in Batch<a class="article-anchor" href="#faviconbuild_Command_Parseing_Batch" aria-hidden="true"></a></h2> <p>You can see in the snippet below, command line parsing in <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> is a bit more cumbersome then the previous script. I decided to support the same options as the <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> script here, but you may notice that it is missing the failure case to exit on bad parameters. I will likely reorganize this in later versions to handle that case, but this is primarily due to the lack of “else if” support.</p> <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">REM command line parsing</span><br><span class="line">:commandlineparsestart</span><br><span class="line"><span class="keyword">if</span> -<span class="variable">%1</span>-==-- <span class="keyword">goto</span> commandlineparseend</span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -o set outdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --outdir set outdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -k set imagemagickdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --imagemagick set imagemagickdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -<span class="keyword">s</span> set subdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --subdir set subdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -ls set linksubdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --linksubdir set linksubdir=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -i set source=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --source set source=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -c set color=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --color set color=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -e set outext=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --ext set outext=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -p set parsed=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --parsed set parsed=<span class="variable">%2</span>&amp; <span class="keyword">shift</span></span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == -h <span class="keyword">goto</span> usage</span><br><span class="line"><span class="keyword">if</span> /I <span class="variable">%1</span> == --help <span class="keyword">goto</span> usage</span><br><span class="line"><span class="keyword">shift</span></span><br><span class="line"><span class="keyword">goto</span> commandlineparsestart</span><br><span class="line">:commandlineparseend</span><br></pre></td></tr></table></figure> <h2 id="faviconbuild_Main_Loop_Batch" class="article-heading">faviconbuild Main loop in Batch<a class="article-anchor" href="#faviconbuild_Main_Loop_Batch" aria-hidden="true"></a></h2> <p>The main loop here is a bit more convoluted then before, although it accomplishes slightly less. I decided to break the loop logic out into a subroutine to keep it a bit cleaner. </p> <p>The <a href="http://ss64.com/nt/for_cmd.html" target="_blank" rel="external">for /f command</a> is used to loop through items in a text file and can take several options. <code>usebackq</code> is used to indicate an alternate quoting style and in this case is used to more easily handle file names with spaces. We specify a wild-card with the ‘tokens’ option <code>tokens=*</code> to specify that we want all of the tokens read (you can optionally put any number here to only read n number of tokens). The ‘delims’ option allows you to specify the delimiter for parsing (I could probably leave this out to keep the default of using a space).</p> <p>Inside the for loop we simply pass the line contents to the <strong>loop</strong> subroutine. This uses <code>enabledelayedexpansion</code> to allow for variables to be expanded at execution time rather then parse time. This is used with the <code>!</code> syntax to avoid parsing the <code>%</code> symbol as we need to replace <code>,</code> with <code>%</code> to set our variables in the parsed output.</p> <p>The first line after the setlocal call uses a wild-card to consume all input to the subroutine. The following line stores a <code>%</code> sign for token replacement (note it must be doubled up <code>%%</code> to avoid it being consumed by the parse). The next two lines utilize string replacement with the <code>set output=%input:token_to_replace:token_to_replace_with</code> syntax with the second line utilizing delayed expansion to replace <code>!percent!</code>.</p> <p>Finally the parsed line is invoked with <code>call</code>.</p> <h1 id="The_Parse_File" class="article-heading">The Parse File<a class="article-anchor" href="#The_Parse_File" aria-hidden="true"></a></h1> <p>I decided to keep the details of favicon creation abstracted into a shared file to make it a little easier to maintain consistency among the two platform specific scripts. There is a decent amount that can be done to update the output by simply adding new commands to the <a href="https://github.com/matthewsanders/faviconbuild/blob/master/favinput.txt" target="_blank" rel="external">parse file</a>.</p> <p>The format is currently self documented in the loops of both scripts, with a bias toward the <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> script as mentioned previously. I decided to keep it simple in the first iteration with the following conventions:</p> <ol> <li>‘function’ calls begin with a colon <code>:</code> to more easily support batch call syntax.</li> <li>variables are wrapped with <code>,#</code> and <code>#,</code> to allow identification of start and end tokens while not clashing with either script.</li> <li><code>del</code> is used to delete a file.</li> </ol> <p>That is pretty much it, everything else is what you would expect if writing the commands normally in the native script.</p> <h1 id="Conclusion" class="article-heading">Conclusion<a class="article-anchor" href="#Conclusion" aria-hidden="true"></a></h1> <p>A simple problem of image manipulation to generate favicons, while also generating the relevant markup to display them, proves itself a worth while exercise in build automation.</p> <p>I hope you found this brief tour of a cross platform build utility interesting, and agree that there is still a great deal of power in writing <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" target="_blank" rel="external">Bash</a> or <a href="https://en.wikipedia.org/wiki/Batch_file" target="_blank" rel="external">Batch</a> scripts to supplement existing systems or aid in their creation.</p> <h1 id="External_links" class="article-heading">External links<a class="article-anchor" href="#External_links" aria-hidden="true"></a></h1> <p><a href="http://theknowledgeaccelerator.com/faviconbuild/">faviconbuild</a><br><a href="http://ss64.com/" target="_blank" rel="external">nice command line reference</a><br><a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="external">ImageMagick</a><br><a href="https://en.wikipedia.org/wiki/Favicon#Standardization" target="_blank" rel="external">favicons on WikiPedia</a><br><a href="http://tldp.org/LDP/abs/html/string-manipulation.html" target="_blank" rel="external">Bash string manipulation</a><br><a href="https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx" target="_blank" rel="external">PowerShell</a></p> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="5517142800" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>]]></content>
    <summary type="html">
    <![CDATA[A simple problem; while developing a website you want to add a nice little favorites icon (favicon) for that extra polished look, or perhaps you just want to stop those annoying 404 errors ]]>
    
    </summary>
    
      <category term="bash" scheme="https://theknowledgeaccelerator.com/tags/bash/"/>
    
      <category term="batch" scheme="https://theknowledgeaccelerator.com/tags/batch/"/>
    
      <category term="build" scheme="https://theknowledgeaccelerator.com/tags/build/"/>
    
      <category term="imagemagick" scheme="https://theknowledgeaccelerator.com/tags/imagemagick/"/>
    
      <category term="scripting" scheme="https://theknowledgeaccelerator.com/tags/scripting/"/>
    
      <category term="shell" scheme="https://theknowledgeaccelerator.com/tags/shell/"/>
    
      <category term="web" scheme="https://theknowledgeaccelerator.com/tags/web/"/>
    
      <category term="Software" scheme="https://theknowledgeaccelerator.com/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World!  Why I Chose Hexo vs Jekyll/Octopress vs WordPress]]></title>
    <link href="https://theknowledgeaccelerator.com/2015/09/29/hello-world/"/>
    <id>https://theknowledgeaccelerator.com/2015/09/29/hello-world/</id>
    <published>2015-09-29T05:00:00.000Z</published>
    <updated>2016-03-23T17:24:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="hellohexo.svg" alt=""></p> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="4283516409" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script><p>It should probably be a requirement that the first post of any engineering blog be a <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program" target="_blank" rel="external">Hello World</a> homage. Let’s kick this one off with a brief discussion of what makes it tick, along with my reasoning for choosing <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> to build it.</p> <h1 id="Decisions" class="article-heading">Decisions Decisions<a class="article-anchor" href="#Decisions" aria-hidden="true"></a></h1> <p>The choice between the countless blogging frameworks out there can seem daunting, but as with any other technology decision it helps to narrow down the selection by coming up with a priorty list of features. Everyone will likely have a different set of requirements, but I feel mine were pretty simple if not a tad biased.</p> <ol> <li>Keep it static</li> <li>Keep it fast</li> <li>Keep it simple</li> <li>Keep it extensible</li> <li>Keep it secret </li> <li>Keep it safe</li> </ol> <h2 id="Power_to_the_client" class="article-heading">Power to the client<a class="article-anchor" href="#Power_to_the_client" aria-hidden="true"></a></h2> <p>First and foremost I chose to stay with a static site building solution. I didn’t want to maintain a bloated server and database for a simple blog. This choice may seem limiting at first, but you can almost always find lightweight solutions to add features you may otherwise miss out on. I plan on covering such solutions in the future, but in general HTML5 has given the client much more power to handle jobs once only viable on the server.</p> <p>The primary reason I decided not to use <a href="https://wordpress.com" target="_blank" rel="external">WordPress</a> is the reliance on a PHP and MySQL back end. I have no real issue using such technologies, and am actually an advocate of <a href="https://en.wikipedia.org/wiki/LAMP_%28software_bundle%29" target="_blank" rel="external">LAMP</a> based architectures in many situations. I just didn’t feel the added complexity was warranted for my blog.</p> <p>A great bonus with a static site over the dynamic variety is you can often find hosting for dirt cheap or even free with services like github pages. This allows you to quickly setup a web presence at a very reasonable price. Having a static site also inherently helps to satisfy item 2 and often 3 of my list.</p> <p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> is one of many frameworks out there that help you build a static website so this alone was not enough for me to use it.</p> <h2 id="Speedy_delivery" class="article-heading">Speedy delivery<a class="article-anchor" href="#Speedy_delivery" aria-hidden="true"></a></h2> <p>The second desirable feature for me is speed. I come from a world of real time applications written in C and C++ with the occasional use of assembly on the critical path. Scripting systems already have some overhead that can’t be avoided, but this is simply payment for the convinience and safety of developing in such environments. I just wanted to ensure that what technology I did end up using would allow me to build an optimal site in a maintainable manner.</p> <p>I have already hinted that having a static site can help with performance, but why is that? The primary reason is you don’t have to wait for database requests and you limit the amount of server requests and dynamic page creation required. Once the site loads the performance is largely up to the client, assuming you are not hitting many other services. You can get similar benifits in a dynamic site with caching mechanisms, and you may have a larger payload up front with a static site, but in general the static site should be less resource intensive and more responsive.</p> <p>Performance is also a very important topic when it comes to development. <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> is based on <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> which is a very popular runtime environment utilizing <a href="https://developers.google.com/v8/" target="_blank" rel="external">Chrome’s V8 JavaScript engine</a>. <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> has proven itself to be lightweight and efficient in many applications, and as I am already required to utilize JavaScript for the browser it isn’t that much of a stretch to continue using it with the framework to develop the site.</p> <p>This is a good time to bring up the other contenders in my decision making process <a href="https://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> and <a href="http://octopress.org/" target="_blank" rel="external">Octopress</a>. <a href="http://octopress.org/" target="_blank" rel="external">Octopress</a> is actually based on <a href="https://jekyllrb.com/" target="_blank" rel="external">Jekyll</a>, adding a few preinstalled plugins and other complexities, so it is enough to consider <a href="https://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> alone in my eyes. The platform in this case is based on <a href="https://www.ruby-lang.org" target="_blank" rel="external">Ruby</a>, a language I am somewhat biased against. I do respect the impact <a href="https://www.ruby-lang.org" target="_blank" rel="external">Ruby</a> and frameworks such as <a href="http://rubyonrails.org/" target="_blank" rel="external">Rails</a> have had on the development community, but it falls into a breed of languages I prefer to avoid with its dynamic type system. I have also read many accounts where people would migrate from <a href="https://www.ruby-lang.org" target="_blank" rel="external">Ruby</a> based frameworks due to speed and maintenance issues. I honestly do not doubt the accounts I have read as <a href="https://www.ruby-lang.org" target="_blank" rel="external">Ruby</a> is more tailored to rapid prototypical work rather then massive codebases. The rest is a topic for another post.</p> <p>In all honesty I would be content without Javascript as well, it is dynamically typed as well, but since it is the language of the web I may as well embrace it. I will also save any further discussion on this topics for another day. For the interested reader there actually are methods to avoid working in JavaScript if you really wanted to (ex: <a href="http://emscripten.org/" target="_blank" rel="external">emscripten</a>, <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a>, or any other means to cross compile to JavaScript), but for this situation it isn’t worth the hassle.</p> <h2 id="Simple_and_flexible" class="article-heading">Simple and flexible<a class="article-anchor" href="#Simple_and_flexible" aria-hidden="true"></a></h2> <p>The third and fourth qualities I desired were simplicity and extensibility. I am happy to report that I have found both with <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>. Sure the support doesn’t seem like it is as active as in the <a href="https://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> ecosystem, but for me it was enough to easily dig into the source and reverse engineer it for myself.</p> <h2 id="Is_it_secret" class="article-heading">Is it secret? Is it safe?<a class="article-anchor" href="#Is_it_secret" aria-hidden="true"></a></h2> <p>Ok so I got a little carried away with the last two in keeping with the theme, but I suppose you could make the argument that easily allowing obfuscation with UglifyJS would keep something somewhat secret (albiet a poor way to do so and a topic we will likely touch on more in future posts) and that easily integrating <a href="https://git-scm.com/" target="_blank" rel="external">git</a> would allow you to keep your blog safe in the sense of data loss. It also doesn’t hurt that a static site is much easier to keep safe in the sense of security as well.</p> <h2 id="Conclusion" class="article-heading">Conclusion<a class="article-anchor" href="#Conclusion" aria-hidden="true"></a></h2> <p>This post is already much longer then any Hello World should be, so to summarize I have thus far found <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> to satisfy all of my priorty list. I wanted a static site generator that was fast, simple, extensible, easily post processed, and all under <a href="https://git-scm.com/" target="_blank" rel="external">git</a> source control. Thanks to the power of <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> and the simplicity and flexibility of <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> I have now found the right framework for my needs.</p> <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2455761929125938" data-ad-slot="5517142800" data-ad-format="auto"></ins><script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>]]></content>
    <summary type="html">
    <![CDATA[It should probably be a requirement that the first post of any engineering blog be a Hello World homage.  Let's kick this one off with a brief discussion of what makes it tick.]]>
    
    </summary>
    
      <category term="hexo" scheme="https://theknowledgeaccelerator.com/tags/hexo/"/>
    
      <category term="jekyll" scheme="https://theknowledgeaccelerator.com/tags/jekyll/"/>
    
      <category term="web" scheme="https://theknowledgeaccelerator.com/tags/web/"/>
    
      <category term="Random" scheme="https://theknowledgeaccelerator.com/categories/Random/"/>
    
  </entry>
  
</feed>
